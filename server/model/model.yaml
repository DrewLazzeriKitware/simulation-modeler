Grid:
  ComputationalGrid_DX:
    _help: This defines the size of grid cells in the x direction. Units are L and
      are defined by the units of the hydraulic conductivity used in the problem.
    _parflowId: ComputationalGrid.DX
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  ComputationalGrid_DY:
    _help: This defines the size of grid cells in the y direction. Units are L and
      are defined by the units of the hydraulic conductivity used in the problem.
    _parflowId: ComputationalGrid.DY
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  ComputationalGrid_DZ:
    _help: This defines the size of grid cells in the z direction. Units are L and
      are defined by the units of the hydraulic conductivity used in the problem.
    _parflowId: ComputationalGrid.DZ
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  ComputationalGrid_Lower_X:
    _help: This assigns the lower x coordinate location for the computational grid.
    _parflowId: ComputationalGrid.Lower.X
    type: float32
  ComputationalGrid_Lower_Y:
    _help: This assigns the lower y coordinate location for the computational grid.
    _parflowId: ComputationalGrid.Lower.Y
    type: float32
  ComputationalGrid_Lower_Z:
    _help: This assigns the lower z coordinate location for the computational grid.
    _parflowId: ComputationalGrid.Lower.Z
    type: float32
  ComputationalGrid_NX:
    _help: This assigns the number of grid cells in the x direction for the computational
      grid.
    _parflowId: ComputationalGrid.NX
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  ComputationalGrid_NY:
    _help: This assigns the number of grid cells in the y direction for the computational
      grid.
    _parflowId: ComputationalGrid.NY
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  ComputationalGrid_NZ:
    _help: This assigns the number of grid cells in the z direction for the computational
      grid.
    _parflowId: ComputationalGrid.NZ
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
Solver:
  Solver:
    _help: "ParFlow can operate using a number of different solvers. Two of these\
      \ solvers, IMPES (running in single-phase, fully-saturated mode, not multiphase)\
      \ and RICHARDS (running in variably-saturated mode, not multiphase, with the\
      \ options of land surface processes and coupled overland flow) are detailed\
      \ below. This is a brief summary of solver settings used to simulate under three\
      \ sets of conditions, fully-saturated, variably saturated and variably-saturated\
      \ with overland flow. To simulate fully saturated, steady-state conditions set\
      \ the solver to IMPES. This is also the default solver in ParFlow, so if no\
      \ solver is specified, the code solves using IMPES. To simulate variably-saturated,\
      \ transient conditions, using Richards\u2019 equation, variably/fully saturated,\
      \ transient with compressible storage set the solver to RICHARDS. This is also\
      \ the solver used to simulate surface flow or coupled surface-subsurface flow."
    _parflowId: Solver
    domains:
    - type: LabelList
      values:
      - text: Impes
        value: Impes
      - text: Richards
        value: Richards
    type: string
  Solver_AbsTol:
    _help: This value gives the absolute tolerance for the linear solve algorithm.
    _parflowId: Solver.AbsTol
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_AdvectOrder:
    _help: This key controls the order of the explicit method used in advancing the
      concentrations. This value can be either 1 for a standard upwind first order
      or 2 for a second order Godunov method.
    _parflowId: Solver.AdvectOrder
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 2
    type: int8
  Solver_BetaFluid:
    _help: '[Type: int]'
    _parflowId: Solver.BetaFluid
    type: float32
  Solver_BetaFracture:
    _help: '[Type: int]'
    _parflowId: Solver.BetaFracture
    type: float32
  Solver_BetaPerm:
    _help: '[Type: int]'
    _parflowId: Solver.BetaPerm
    type: float32
  Solver_BetaPore:
    _help: '[Type: int]'
    _parflowId: Solver.BetaPore
    type: float32
  Solver_BoxSizePowerOf2:
    _help: '[Type: int]'
    _parflowId: Solver.BoxSizePowerOf2
    type: float32
  Solver_CFL:
    _help: This key gives the value of the weight put on the computed CFL limit before
      computing a global timestep value. Values greater than 1 are not suggested and
      in fact because this is an approximation, values slightly less than 1 can also
      produce instabilities.
    _parflowId: Solver.CFL
    type: float32
  Solver_CLM_BinaryOutDir:
    _help: This key specifies whether the CLM writes each set of two dimensional binary
      output files to a corresponding directory. These directories my be created before
      ParFlow is run (using the tcl script, for example). Choices for this key include
      True and False. Note that CLM must be compiled and linked at runtime for this
      option to be active.
    _parflowId: Solver.CLM.BinaryOutDir
    type: string
  Solver_CLM_CLMDumpInterval:
    _help: This key specifies how often output from the CLM is written. This key is
      in integer multipliers of the CLM timestep. Note that CLM must be compiled and
      linked at runtime for this option to be active.
    _parflowId: Solver.CLM.CLMDumpInterval
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  Solver_CLM_CLMFileDir:
    _help: This key specifies what directory all output from the CLM is written to.
      This key may be set to "./" or "" to write output to the ParFlow run directory.
      This directory must be created before ParFlow is run. Note that CLM must be
      compiled and linked at runtime for this option to be active.
    _parflowId: Solver.CLM.CLMFileDir
    type: string
  Solver_CLM_DailyRST:
    _help: Controls whether CLM writes daily restart files (default) or at every time
      step when set to False; outputs are numbered according to the istep from ParFlow.
      If ReuseCount=n, with n greater than 1, the output will be written every n steps
      (i.e. it still writes hourly restart files if your time step is 0.5 or 0.25,
      etc...). Fully compatible with WriteLastRST=False so that each daily output
      is overwritten to time 00000 in restart file name.00000.p where p is the processor
      number.
    _parflowId: Solver.CLM.DailyRST
    type: string
  Solver_CLM_EvapBeta:
    _help: This key specifies the form of the bare soil evaporation parameter in CLM.
      The valid types for this key are None, Linear, Cosine.
    _parflowId: Solver.CLM.EvapBeta
    domains:
    - type: LabelList
      values:
      - text: None
        value: None
      - text: Linear
        value: Linear
      - text: Cosine
        value: Cosine
    type: string
  Solver_CLM_FieldCapacity:
    _help: This key specifies the field capacity for the beta-t function in CLM. Note
      that the units for this function are pressure [m] for a Pressure formulation
      and saturation [-] for a Saturation formulation. Note that CLM must be compiled
      and linked at runtime for this option to be active.
    _parflowId: Solver.CLM.FieldCapacity
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - 1.0
    type: float32
  Solver_CLM_ForceVegetation:
    _help: 'This key specifies whether vegetation should be forced in CLM. Currently
      this option only works for 1D and 3D forcings, as specified by the key Solver.CLM.MetForcing.
      Choices for this key include True and False. Forced vegetation variables are
      : LAI: Leaf Area Index [-] SAI: Stem Area Index [-] Z0M: Aerodynamic roughness
      length [m] DISPLA: Displacement height [m] In the case of 1D meteorological
      forcings, CLM requires four files for vegetation time series and one vegetation
      map. The four files should be named respectively lai.dat, sai.dat, z0m.dat,
      displa.dat. They are ASCII files and contain 18 time-series columns (one per
      IGBP vegetation class, and each timestep per row). The vegetation map should
      be a properly distributed 2D ParFlow binary file (.pfb) which contains vegetation
      indices (from 1 to 18). The vegetation map filename is veg_map.pfb. ParFlow
      uses the vegetation map to pass to CLM a 2D map for each vegetation variable
      at each time step. In the case of 3D meteorological forcings, ParFlow expects
      four distincts properly distributed ParFlow binary file (.pfb), the third dimension
      being the timesteps. The files should be named LAI.pfb, SAI.pfb, Z0M.pfb, DISPLA.pfb.
      No vegetation map is needed in this case.'
    _parflowId: Solver.CLM.ForceVegetation
    type: string
  Solver_CLM_FstepStart:
    _help: '[Type: int]'
    _parflowId: Solver.CLM.FstepStart
    type: float32
  Solver_CLM_Input_Domain_MaxTiles:
    _help: Maximum tiles per grid (originally 3; changed it, because we have one type
      per cell)
    _parflowId: Solver.CLM.Input.Domain.MaxTiles
    type: int8
  Solver_CLM_Input_Domain_MinGridArea:
    _help: Min grid area for tile (%)
    _parflowId: Solver.CLM.Input.Domain.MinGridArea
    type: float32
  Solver_CLM_Input_Domain_UndefinedValue:
    _help: Undefined value
    _parflowId: Solver.CLM.Input.Domain.UndefinedValue
    type: int8
  Solver_CLM_Input_Domain_VegClassification:
    _help: Vegetation Classification Scheme (1=UMD,2=IGBP,etc.) NOT the index
    _parflowId: Solver.CLM.Input.Domain.VegClassification
    type: int8
  Solver_CLM_Input_File_ActiveRestart:
    _help: CLM active restart file
    _parflowId: Solver.CLM.Input.File.ActiveRestart
    type: string
  Solver_CLM_Input_File_MetInput:
    _help: Meterologic input file- valdai 3 hr
    _parflowId: Solver.CLM.Input.File.MetInput
    type: string
  Solver_CLM_Input_File_Output:
    _help: CLM output file
    _parflowId: Solver.CLM.Input.File.Output
    type: string
  Solver_CLM_Input_File_ParamOutput:
    _help: CLM 1D Parameter Output File
    _parflowId: Solver.CLM.Input.File.ParamOutput
    type: string
  Solver_CLM_Input_File_VegTileSpecification:
    _help: Vegetation Tile Specification File
    _parflowId: Solver.CLM.Input.File.VegTileSpecification
    type: string
  Solver_CLM_Input_File_VegTypeParameter:
    _help: Vegetation Type Parameter File
    _parflowId: Solver.CLM.Input.File.VegTypeParameter
    type: string
  Solver_CLM_Input_Forcing_HumObsHeight:
    _help: Observational height of humidity [m]
    _parflowId: Solver.CLM.Input.Forcing.HumObsHeight
    type: float32
  Solver_CLM_Input_Forcing_TempObsHeight:
    _help: Observational height of temperature [m]
    _parflowId: Solver.CLM.Input.Forcing.TempObsHeight
    type: float32
  Solver_CLM_Input_Forcing_WindObsHeight:
    _help: Observational height of wind [m]
    _parflowId: Solver.CLM.Input.Forcing.WindObsHeight
    type: float32
  Solver_CLM_Input_ICSource_Code:
    _help: Initial condition specification (1) restart file, (2) drv_clmin.dat file
    _parflowId: Solver.CLM.Input.ICSource.Code
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 2
    type: int8
  Solver_CLM_Input_InitCond_SnowCover:
    _help: '[Type: int]'
    _parflowId: Solver.CLM.Input.InitCond.SnowCover
    type: int8
  Solver_CLM_Input_InitCond_Temperature:
    _help: Initial temperature [K]
    _parflowId: Solver.CLM.Input.InitCond.Temperature
    type: int8
  Solver_CLM_Input_NumericalParams_CNFactor:
    _help: Crank Nicholson factor between 0 and 1
    _parflowId: Solver.CLM.Input.NumericalParams.CNFactor
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 1
    type: float32
  Solver_CLM_Input_NumericalParams_IrrSnowSat:
    _help: Irreducible water saturation of snow
    _parflowId: Solver.CLM.Input.NumericalParams.IrrSnowSat
    type: float32
  Solver_CLM_Input_NumericalParams_MinSoilPotential:
    _help: Restriction for min of soil poten. (mm)
    _parflowId: Solver.CLM.Input.NumericalParams.MinSoilPotential
    type: float32
  Solver_CLM_Input_NumericalParams_TuningFactor:
    _help: Tuning factor to turn first layer T into surface T
    _parflowId: Solver.CLM.Input.NumericalParams.TuningFactor
    type: float32
  Solver_CLM_Input_NumericalParams_WaterImpermeable:
    _help: Water impermeable if porosity < wimp
    _parflowId: Solver.CLM.Input.NumericalParams.WaterImpermeable
    type: float32
  Solver_CLM_Input_OutputVars_Snow:
    _help: Number of snow layer diagnostic variables to output
    _parflowId: Solver.CLM.Input.OutputVars.Snow
    type: int8
  Solver_CLM_Input_OutputVars_Soil:
    _help: Number of soil layer diagnostic variables to output
    _parflowId: Solver.CLM.Input.OutputVars.Soil
    type: int8
  Solver_CLM_Input_OutputVars_Surface:
    _help: Number of surface diagnostic variables to output
    _parflowId: Solver.CLM.Input.OutputVars.Surface
    type: int8
  Solver_CLM_Input_RoughnessLength_DragCanopySoil:
    _help: Drag coefficient for soil under canopy [-]
    _parflowId: Solver.CLM.Input.RoughnessLength.DragCanopySoil
    type: float32
  Solver_CLM_Input_RoughnessLength_Snow:
    _help: Roughness length for snow [m]
    _parflowId: Solver.CLM.Input.RoughnessLength.Snow
    type: float32
  Solver_CLM_Input_RoughnessLength_Soil:
    _help: Roughness length for soil [m]
    _parflowId: Solver.CLM.Input.RoughnessLength.Soil
    type: float32
  Solver_CLM_Input_Timing_EndDate:
    _help: Helper property that will set EndYear/EndMonth/EndDay
    _parflowId: Solver.CLM.Input.Timing.EndDate
  Solver_CLM_Input_Timing_EndDay:
    _help: Ending day of CLM data.
    _parflowId: Solver.CLM.Input.Timing.EndDay
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 31
    type: int8
  Solver_CLM_Input_Timing_EndHour:
    _help: Ending hour of CLM data.
    _parflowId: Solver.CLM.Input.Timing.EndHour
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 23
    type: int8
  Solver_CLM_Input_Timing_EndMinute:
    _help: Ending minute of CLM data.
    _parflowId: Solver.CLM.Input.Timing.EndMinute
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 59
    type: int8
  Solver_CLM_Input_Timing_EndMonth:
    _help: Ending month of CLM data.
    _parflowId: Solver.CLM.Input.Timing.EndMonth
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 12
    type: int8
  Solver_CLM_Input_Timing_EndSecond:
    _help: Ending second of CLM data.
    _parflowId: Solver.CLM.Input.Timing.EndSecond
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 59
    type: int8
  Solver_CLM_Input_Timing_EndTime:
    _help: Helper property that will set EndHour:EndMinute:EndSecond
    _parflowId: Solver.CLM.Input.Timing.EndTime
  Solver_CLM_Input_Timing_EndYear:
    _help: Ending year of CLM data.
    _parflowId: Solver.CLM.Input.Timing.EndYear
    type: int8
  Solver_CLM_Input_Timing_RestartCode:
    _help: 1 = starting timing from a restart file, 2 = timing is defined in the script
    _parflowId: Solver.CLM.Input.Timing.RestartCode
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 2
    type: int8
  Solver_CLM_Input_Timing_StartDate:
    _help: Helper property that will set StartYear/StartMonth/StartDay
    _parflowId: Solver.CLM.Input.Timing.StartDate
  Solver_CLM_Input_Timing_StartDay:
    _help: Starting day of CLM data.
    _parflowId: Solver.CLM.Input.Timing.StartDay
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 31
    type: int8
  Solver_CLM_Input_Timing_StartHour:
    _help: Starting hour of CLM data.
    _parflowId: Solver.CLM.Input.Timing.StartHour
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 24
    type: int8
  Solver_CLM_Input_Timing_StartMinute:
    _help: Starting minute of CLM data.
    _parflowId: Solver.CLM.Input.Timing.StartMinute
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 59
    type: int8
  Solver_CLM_Input_Timing_StartMonth:
    _help: Starting month of CLM data.
    _parflowId: Solver.CLM.Input.Timing.StartMonth
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 12
    type: int8
  Solver_CLM_Input_Timing_StartSecond:
    _help: Starting second of CLM data.
    _parflowId: Solver.CLM.Input.Timing.StartSecond
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - 59
    type: int8
  Solver_CLM_Input_Timing_StartTime:
    _help: Helper property that will set StartHour:StartMinute:StartSecond
    _parflowId: Solver.CLM.Input.Timing.StartTime
  Solver_CLM_Input_Timing_StartYear:
    _help: Starting year of CLM data.
    _parflowId: Solver.CLM.Input.Timing.StartYear
    type: int8
  Solver_CLM_Input_Vegetation_MaxDew:
    _help: Maximum allowed dew [mm]
    _parflowId: Solver.CLM.Input.Vegetation.MaxDew
    type: float32
  Solver_CLM_Input_Vegetation_MaxTranspiration:
    _help: Maximum possible transpiration rate [mm/s]
    _parflowId: Solver.CLM.Input.Vegetation.MaxTranspiration
    type: float32
  Solver_CLM_Input_Vegetation_RootFraction:
    _help: Root Fraction (depth average)
    _parflowId: Solver.CLM.Input.Vegetation.RootFraction
    type: float32
  Solver_CLM_IrrigationCycle:
    _help: This key specifies the cycle of the irrigation in CLM. The valid types
      for this key are Constant, Deficit. Note only Constant is currently implemented.
      Constant cycle applies irrigation each day from IrrigationStartTime to IrrigationStopTime
      in GMT.
    _parflowId: Solver.CLM.IrrigationCycle
    domains:
    - type: LabelList
      values:
      - text: Constant
        value: Constant
      - text: Deficit
        value: Deficit
    type: string
  Solver_CLM_IrrigationRate:
    _help: This key specifies the rate of the irrigation in CLM in [mm/s].
    _parflowId: Solver.CLM.IrrigationRate
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_CLM_IrrigationStartTime:
    _help: This key specifies the start time of the irrigation in CLM GMT.
    _parflowId: Solver.CLM.IrrigationStartTime
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - 2400.0
    type: float32
  Solver_CLM_IrrigationStopTime:
    _help: This key specifies the stop time of the irrigation in CLM GMT.
    _parflowId: Solver.CLM.IrrigationStopTime
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - 2400.0
    type: float32
  Solver_CLM_IrrigationThreshold:
    _help: This key specifies the threshold value for the irrigation in CLM [-].
    _parflowId: Solver.CLM.IrrigationThreshold
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_CLM_IrrigationThresholdType:
    _help: '[Type: string]'
    _parflowId: Solver.CLM.IrrigationThresholdType
    type: float32
  Solver_CLM_IrrigationType:
    _help: This key specifies the form of the irrigation in CLM. The valid types for
      this key are none, Spray, Drip, Instant.
    _parflowId: Solver.CLM.IrrigationType
    domains:
    - type: LabelList
      values:
      - text: none
        value: none
      - text: Spray
        value: Spray
      - text: Drip
        value: Drip
      - text: Instant
        value: Instant
    type: string
  Solver_CLM_IstepStart:
    _help: This key specifies the value of the counter, istep in CLM. This key primarily
      determines the start of the output counter for CLM.It is used to restart a run
      by setting the key to the ending step of the previous run plus one. Note that
      CLM must be compiled and linked at runtime for this option to be active.
    _parflowId: Solver.CLM.IstepStart
    type: int8
  Solver_CLM_MetFileNT:
    _help: This key specifies the number of timesteps per file for 3D forcing data.
    _parflowId: Solver.CLM.MetFileNT
    type: int8
  Solver_CLM_MetFileName:
    _help: 'This key specifies defines the file name for 1D, 2D or 3D forcing data.
      1D meteorological forcing files are text files with single columns for each
      variable and each timestep per row, while 2D and 3D forcing files are distributed
      ParFlow binary files, one for each variable and timestep (2D) or one for each
      variable and multiple timesteps (3D). Behavior of this key is different for
      1D and 2D and 3D cases, as sepcified by the Solver.CLM.MetForcing key above.
      For 1D cases, it is the FULL FILE NAME. Note that in this configuration, this
      forcing file is not distributed, the user does not provide copies such as narr.1hr.txt.0,
      narr.1hr.txt.1 for each processor. ParFlow only needs the single original file
      (e.g. narr.1hr.txt). For 2D cases, this key is the BASE FILE NAME for the 2D
      forcing files, currently set to NLDAS, with individual files determined as follows
      NLDAS.<variable>.<time step>.pfb. Where the <variable> is the forcing variable
      and <timestep> is the integer file counter corresponding to istep above. Forcing
      is needed for following variables: DSWR: Downward Visible or Short-Wave radiation
      [W/m2]. DLWR: Downward Infa-Red or Long-Wave radiation [W/m2] APCP: Precipitation
      rate [mm/s] Temp: Air temperature [K] UGRD: West-to-East or U-component of wind
      [m/s] VGRD: South-to-North or V-component of wind [m/s] Press: Atmospheric Pressure
      [pa] SPFH: Water-vapor specific humidity [kg/kg] Note that CLM must be compiled
      and linked at runtime for this option to be active.'
    _parflowId: Solver.CLM.MetFileName
    type: string
  Solver_CLM_MetFilePath:
    _help: This key specifies defines the location of 1D, 2D or 3D forcing data. For
      1D cases, this is the path to a single forcing file (e.g. narr.1hr.txt). For
      2D and 3D cases, this is the path to the directory containing all forcing files.
      Note that CLM must be compiled and linked at runtime for this option to be active.
    _parflowId: Solver.CLM.MetFilePath
    type: string
  Solver_CLM_MetFileSubdir:
    _help: '[Type: int]'
    _parflowId: Solver.CLM.MetFileSubdir
    type: float32
  Solver_CLM_MetForcing:
    _help: This key specifies defines whether 1D (uniform over the domain), 2D (spatially
      distributed) or 3D (spatially distributed with multiple timesteps per .pfb forcing
      file) forcing data is used. Choices for this key are 1D, 2D and 3D. This key
      has no default so the user must set it to 1D, 2D or 3D. Failure to set this
      key will cause CLM to still be run but with unpredictable values causing CLM
      to eventually crash. 1D meteorological forcing files are text files with single
      columns for each variable and each timestep per row, while 2D forcing files
      are distributed ParFlow binary files, one for each variable and timestep. File
      names are specified in the Solver.CLM.MetFileName variable below. Note that
      CLM must be compiled and linked at runtime for this option to be active.
    _parflowId: Solver.CLM.MetForcing
    domains:
    - type: LabelList
      values:
      - text: 1D
        value: 1D
      - text: 2D
        value: 2D
      - text: 3D
        value: 3D
    type: string
  Solver_CLM_OverwriteDrvClmin:
    _help: When False, the `drv_clmin.dat` file will not be overwritten, except when
      it was automatically generated by pftools. If the user modifies variables that
      would have affected the file, and the file is not overwritten, a warning will
      be printed, so the user will know that their changes will not be reflected in
      the calculation.
    _parflowId: Solver.CLM.OverwriteDrvClmin
    type: string
  Solver_CLM_OverwriteDrvVegm:
    _help: When False, the `drv_vegm.dat` file will not be overwritten, except when
      it was automatically generated by pftools. If the user modifies variables that
      would have affected the file, and the file is not overwritten, a warning will
      be printed, so the user will know that their changes will not be reflected in
      the calculation.
    _parflowId: Solver.CLM.OverwriteDrvVegm
    type: string
  Solver_CLM_OverwriteDrvVegp:
    _help: When False, the `drv_vegp.dat` file will not be overwritten, except when
      it was automatically generated by pftools. If the user modifies variables that
      would have affected the file, and the file is not overwritten, a warning will
      be printed, so the user will know that their changes will not be reflected in
      the calculation.
    _parflowId: Solver.CLM.OverwriteDrvVegp
    type: string
  Solver_CLM_Print1dOut:
    _help: This key specifies whether the CLM one dimensional (averaged over each
      processor) output file is written or not. Choices for this key include True
      and False. Note that CLM must be compiled and linked at runtime for this option
      to be active.
    _parflowId: Solver.CLM.Print1dOut
    type: string
  Solver_CLM_RZWaterStress:
    _help: '[Type: ???]'
    _parflowId: Solver.CLM.RZWaterStress
    type: string
  Solver_CLM_ResSat:
    _help: This key specifies the residual saturation for the saturation function
      in CLM. Note that CLM must be compiled and linked at runtime for this option
      to be active.
    _parflowId: Solver.CLM.ResSat
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_CLM_ReuseCount:
    _help: How many times to reuse a CLM atmospheric forcing file input. For example
      timestep=1, reuse =1 is normal behavior but reuse=2 and timestep=0.5 subdivides
      the time step using the same CLM input for both halves instead of needing two
      files. This is particually useful for large, distributed runs when the user
      wants to run ParFlow at a smaller timestep than the CLM forcing. Forcing files
      will be re-used and total fluxes adjusted accordingly without needing duplicate
      files.
    _parflowId: Solver.CLM.ReuseCount
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - null
    type: int8
  Solver_CLM_RootZoneNZ:
    _help: This key sets the number of soil layers the ParFlow expects from CLM. It
      will allocate and format all the arrays for passing variables to and from CLM
      accordingly. This value now sets the CLM number as well so recompilation is
      not required anymore. Most likely the key Solver.CLM.SoiLayer will also need
      to be changed.
    _parflowId: Solver.CLM.RootZoneNZ
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  Solver_CLM_SingleFile:
    _help: "Controls whether ParFlow writes all CLM output variables as a single file\
      \ per time step. When \"True\", this combines the output of all the CLM output\
      \ variables into a special multi-layer PFB with the file extension \".C.pfb\"\
      . The first 13 layers correspond to the 2-D CLM outputs and the remaining layers\
      \ are the soil temperatures in each layer. For example, a model with 4 soil\
      \ layers will create a SingleFile CLM output with 17 layers at each time step.\
      \ The file pseudo code is given below in \xA7 6.4 and the variables and units\
      \ are as specified in the multiple PFB and SILO formats as above."
    _parflowId: Solver.CLM.SingleFile
    type: string
  Solver_CLM_SoiLayer:
    _help: This key sets the soil layer, and thus the soil depth, that CLM uses for
      the seasonal temperature adjustment for all leaf and stem area indices.
    _parflowId: Solver.CLM.SoiLayer
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  Solver_CLM_VegWaterStress:
    _help: This key specifies the form of the plant water stress function parameter
      in CLM. The valid types for this key are None, Saturation, Pressure.
    _parflowId: Solver.CLM.VegWaterStress
    domains:
    - type: LabelList
      values:
      - text: None
        value: None
      - text: Saturation
        value: Saturation
      - text: Pressure
        value: Pressure
    type: string
  Solver_CLM_Vegetation_Map_Clay_FileName:
    _help: Specifies the PFB filename of the clay properties for your domain, if Solver.CLM.Vegetation.Map.Clay.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the longitude
      values (in decimal degrees) in each of the grid cells.
    _parflowId: Solver.CLM.Vegetation.Map.Clay.FileName
    type: string
  Solver_CLM_Vegetation_Map_Clay_Type:
    _help: Specifies the type of clay property specification for CLM. Valid types
      are 'Constant' and 'PFBFile'.
    _parflowId: Solver.CLM.Vegetation.Map.Clay.Type
    domains:
    - type: LabelList
      values:
      - text: Constant
        value: Constant
      - text: PFBFile
        value: PFBFile
    type: string
  Solver_CLM_Vegetation_Map_Clay_Value:
    _help: Specifies the constant value of the percentage of clay for your domain,
      if Solver.CLM.Vegetation.Map.Clay.Type was set to 'Constant'.
    _parflowId: Solver.CLM.Vegetation.Map.Clay.Value
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - 1.0
    type: float32
  Solver_CLM_Vegetation_Map_Color_FileName:
    _help: Specifies the PFB filename of the color properties for your domain, if
      Solver.CLM.Vegetation.Map.Color.Type was set to 'PFBFile'. This file should
      be a gridded PFB file with the longitude values (in decimal degrees) in each
      of the grid cells.
    _parflowId: Solver.CLM.Vegetation.Map.Color.FileName
    type: string
  Solver_CLM_Vegetation_Map_Color_Type:
    _help: Specifies the type of color property specification for CLM. Valid types
      are 'Constant' and 'PFBFile'.
    _parflowId: Solver.CLM.Vegetation.Map.Color.Type
    domains:
    - type: LabelList
      values:
      - text: Constant
        value: Constant
      - text: PFBFile
        value: PFBFile
    type: string
  Solver_CLM_Vegetation_Map_Color_Value:
    _help: Specifies the constant value of the color for your domain, if Solver.CLM.Vegetation.Map.Color.Type
      was set to 'Constant'.
    _parflowId: Solver.CLM.Vegetation.Map.Color.Value
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 8
    type: int8
  Solver_CLM_Vegetation_Map_Latitude_FileName:
    _help: Specifies the PFB filename of the latitude for your domain, if Solver.CLM.Vegetation.Map.Latitude.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the latitude
      values (in decimal degrees) in each of the grid cells.
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.FileName
    type: string
  Solver_CLM_Vegetation_Map_Latitude_Max:
    _help: Specifies the value (in decimal degrees) of the maximum latitude for your
      domain, if Solver.CLM.Vegetation.Map.Latitude.Type was set to 'Linear'.
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Max
    domains:
    - level: 1
      type: Range
      value_range:
      - -90.0
      - 90.0
    type: float32
  Solver_CLM_Vegetation_Map_Latitude_Min:
    _help: Specifies the value (in decimal degrees) of the minimum latitude for your
      domain, if Solver.CLM.Vegetation.Map.Latitude.Type was set to 'Linear'.
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Min
    domains:
    - level: 1
      type: Range
      value_range:
      - -90.0
      - 90.0
    type: float32
  Solver_CLM_Vegetation_Map_Latitude_Type:
    _help: Specifies the type of latitude specification for CLM. Valid types are 'Constant',
      'Linear', and 'PFBFile'.
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Type
    domains:
    - type: LabelList
      values:
      - text: Constant
        value: Constant
      - text: Linear
        value: Linear
      - text: PFBFile
        value: PFBFile
    type: string
  Solver_CLM_Vegetation_Map_Latitude_Value:
    _help: Specifies the constant value (in decimal degrees) of the latitude for your
      domain, if Solver.CLM.Vegetation.Map.Latitude.Type was set to 'Constant'.
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Value
    domains:
    - level: 1
      type: Range
      value_range:
      - -90.0
      - 90.0
    type: float32
  Solver_CLM_Vegetation_Map_Longitude_FileName:
    _help: Specifies the PFB filename of the longitude for your domain, if Solver.CLM.Vegetation.Map.Longitude.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the longitude
      values (in decimal degrees) in each of the grid cells.
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.FileName
    type: string
  Solver_CLM_Vegetation_Map_Longitude_Max:
    _help: Specifies the value (in decimal degrees) of the maximum longitude for your
      domain, if Solver.CLM.Vegetation.Map.Longitude.Type was set to 'Linear'.
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Max
    domains:
    - level: 1
      type: Range
      value_range:
      - -180.0
      - 180.0
    type: float32
  Solver_CLM_Vegetation_Map_Longitude_Min:
    _help: Specifies the value (in decimal degrees) of the minimum longitude for your
      domain, if Solver.CLM.Vegetation.Map.Longitude.Type was set to 'Linear'.
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Min
    domains:
    - level: 1
      type: Range
      value_range:
      - -180.0
      - 180.0
    type: float32
  Solver_CLM_Vegetation_Map_Longitude_Type:
    _help: Specifies the type of longitude specification for CLM. Valid types are
      'Constant', 'Linear', and 'PFBFile'.
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Type
    domains:
    - type: LabelList
      values:
      - text: Constant
        value: Constant
      - text: Linear
        value: Linear
      - text: PFBFile
        value: PFBFile
    type: string
  Solver_CLM_Vegetation_Map_Longitude_Value:
    _help: Specifies the constant value (in decimal degrees) of the longitude for
      your domain, if Solver.CLM.Vegetation.Map.Longitude.Type was set to 'Constant'.
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Value
    domains:
    - level: 1
      type: Range
      value_range:
      - -180.0
      - 180.0
    type: float32
  Solver_CLM_Vegetation_Map_Sand_FileName:
    _help: Specifies the PFB filename of the sand properties for your domain, if Solver.CLM.Vegetation.Map.Sand.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the percentage
      of sand in each of the grid cells.
    _parflowId: Solver.CLM.Vegetation.Map.Sand.FileName
    type: string
  Solver_CLM_Vegetation_Map_Sand_Type:
    _help: Specifies the type of sand property specification for CLM. Valid types
      are 'Constant' and 'PFBFile'.
    _parflowId: Solver.CLM.Vegetation.Map.Sand.Type
    domains:
    - type: LabelList
      values:
      - text: Constant
        value: Constant
      - text: PFBFile
        value: PFBFile
    type: string
  Solver_CLM_Vegetation_Map_Sand_Value:
    _help: Specifies the constant value of the percentage of sand for your domain,
      if Solver.CLM.Vegetation.Map.Sand.Type was set to 'Constant'.
    _parflowId: Solver.CLM.Vegetation.Map.Sand.Value
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - 1.0
    type: float32
  Solver_CLM_Vegetation_Parameters_LandNames:
    _help: List of names of land use cover types for building the drv_vegp.dat file.
      Defaults to the 18 IGBP classification types.
    _parflowId: Solver.CLM.Vegetation.Parameters.LandNames
    type: string
  Solver_CLM_WiltingPoint:
    _help: This key specifies the wilting point for the bets-t function in CLM. Note
      that the units for this function are pressure [m] for a Pressure formulation
      and saturation [-] for a Saturation formulation. Note that CLM must be compiled
      and linked at runtime for this option to be active.
    _parflowId: Solver.CLM.WiltingPoint
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_CLM_WriteLastRST:
    _help: Controls whether CLM restart files are sequentially written or whether
      a single file restart file name.00000.p is overwritten each time the restart
      file is output, where p is the processor number. If "True" only one file is
      written/overwritten and if "False" outputs are written more frequently. Compatible
      with DailyRST and ReuseCount; for the latter, outputs are written every n steps
      where n is the value of ReuseCount.
    _parflowId: Solver.CLM.WriteLastRST
    type: string
  Solver_CLM_WriteLogs:
    _help: 'When False, this disables writing of the CLM output log files for each
      processor. For example, in the clm.tcl test case, if this flag is added False,
      washita.output.txt.p and washita.para.out.dat.p (were p is the processor #)
      are not created, assuming washita is the run name.'
    _parflowId: Solver.CLM.WriteLogs
    type: string
  Solver_CoarseSolve:
    _help: '[Type: int]'
    _parflowId: Solver.CoarseSolve
    type: float32
  Solver_CompCompress:
    _help: '[Type: int]'
    _parflowId: Solver.CompCompress
    type: float32
  Solver_DiagScale:
    _help: '[Type: int]'
    _parflowId: Solver.DiagScale
    type: float32
  Solver_DiagSolver:
    _help: '[Type: int]'
    _parflowId: Solver.DiagSolver
    type: float32
  Solver_Drop:
    _help: This key gives a clipping value for data written to PFSB files. Data values
      greater than the negative of this value and less than the value itself are treated
      as zero and not written to PFSB files.
    _parflowId: Solver.Drop
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - null
    type: float32
  Solver_DropTol:
    _help: '[Type: int]'
    _parflowId: Solver.DropTol
    type: float32
  Solver_EvapTransFile:
    _help: "This key specifies specifies that the Flux terms for Richards\u2019 equation\
      \ are read in from a .pfb file. This file has [T-1] units. Note this key is\
      \ for a steady-state flux and should not be used in conjunction with the transient\
      \ key below."
    _parflowId: Solver.EvapTransFile
    type: string
  Solver_EvapTransFileTransient:
    _help: "This key specifies specifies that the Flux terms for Richards\u2019 equation\
      \ are read in from a series of flux .pfb file. Each file has [T-1] units. Note\
      \ this key should not be used with the key above, only one of these keys should\
      \ be set to True at a time, not both."
    _parflowId: Solver.EvapTransFileTransient
    type: string
  Solver_EvapTrans_FileLooping:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.EvapTrans.FileLooping
    type: string
  Solver_EvapTrans_FileName:
    _help: "This key specifies specifies filename for the distributed .pfb file that\
      \ contains the flux values for Richards\u2019 equation. This file has [T-1]\
      \ units. For the steady-state option (Solver.EvapTransFile=True) this key should\
      \ be the complete filename. For the transient option (Solver.EvapTransFileTransient=True\
      \ then the filename is a header and ParFlow will load one file per timestep,\
      \ with the form filename.00000.pfb."
    _parflowId: Solver.EvapTrans.FileName
    type: string
  Solver_Jacobian:
    _help: '[Type: int]'
    _parflowId: Solver.Jacobian
    type: float32
  Solver_LSM:
    _help: This key specifies whether a land surface model, such as CLM, will be called
      each solver timestep. Choices for this key include none and CLM. Note that CLM
      must be compiled and linked at runtime for this option to be active.
    _parflowId: Solver.LSM
    domains:
    - type: LabelList
      values:
      - text: none
        value: none
      - text: CLM
        value: CLM
    type: string
  Solver_Linear:
    _help: This key specifies the linear solver used for solver IMPES. Choices for
      this key are MGSemi, PPCG, PCG, and CGHS. The choice MGSemi is an algebraic
      mulitgrid linear solver (not a preconditioned conjugate gradient) which may
      be less robust than PCG as described in [3]. The choice PPCG is a preconditioned
      conjugate gradient solver. The choice PCG is a conjugate gradient solver with
      a multigrid preconditioner. The choice CGHS is a conjugate gradient solver.
    _parflowId: Solver.Linear
    domains:
    - type: LabelList
      values:
      - text: MGSemi
        value: MGSemi
      - text: PPCG
        value: PPCG
      - text: PCG
        value: PCG
      - text: CGHS
        value: CGHS
    type: string
  Solver_Linear_KrylovDimension:
    _help: This key specifies the maximum number of vectors to be used in setting
      up the Krylov subspace in the GMRES iterative solver. These vectors are of problem
      size and it should be noted that large increases in this parameter can limit
      problem sizes. However, increasing this parameter can sometimes help nonlinear
      solver convergence.
    _parflowId: Solver.Linear.KrylovDimension
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  Solver_Linear_MaxRestart:
    _help: This key specifies the number of restarts allowed to the GMRES solver.
      Restarts start the development of the Krylov subspace over using the current
      iterate as the initial iterate for the next pass.
    _parflowId: Solver.Linear.MaxRestart
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - null
    type: int8
  Solver_Linear_MaxRestarts:
    _help: This key specifies the number of restarts allowed to the GMRES solver.
      Restarts start the development of the Krylov subspace over using the current
      iterate as the initial iterate for the next pass.
    _parflowId: Solver.Linear.MaxRestarts
    domains:
    - level: 1
      type: Range
      value_range:
      - 0
      - null
    type: int8
  Solver_Linear_Preconditioner:
    _help: This key specifies which preconditioner to use. Currently, the three choices
      are NoPC, MGSemi, PFMG, PFMGOctree and SMG. The choice NoPC specifies that no
      preconditioner should be used. The choice MGSemi specifies a semi-coarsening
      multigrid algorithm which uses a point relaxation method. The choice SMG specifies
      a semi-coarsening multigrid algorithm which uses plane relaxations. This method
      is more robust than MGSemi, but generally requires more memory and compute time.
      The choice PFMGOctree can be more efficient for problems with large numbers
      of inactive cells.
    _parflowId: Solver.Linear.Preconditioner
    domains:
    - type: LabelList
      values:
      - text: NoPC
        value: NoPC
      - text: MGSemi
        value: MGSemi
      - text: PFMG
        value: PFMG
      - text: PFMGOctree
        value: PFMGOctree
      - text: SMG
        value: SMG
    type: string
  Solver_Linear_Preconditioner_PCMatrixType:
    _help: '[Type: string]'
    _parflowId: Solver.Linear.Preconditioner.PCMatrixType
    domains:
    - type: LabelList
      values:
      - text: FullJacobian
        value: FullJacobian
      - text: PFSymmetric
        value: PFSymmetric
    type: string
  Solver_Linear_Preconditioner_SymmetricMat:
    _help: 'This key specifies whether the preconditioning matrix is symmetric. Choices
      fo rthis key are Symmetric and Nonsymmetric. The choice Symmetric specifies
      that the symmetric part of the Jacobian will be used as the preconditioning
      matrix. The choice Nonsymmetric specifies that the full Jacobian will be used
      as the preconditioning matrix. NOTE: ONLY Symmetric CAN BE USED IF MGSemi IS
      THE SPECIFIED PRECONDITIONER!'
    _parflowId: Solver.Linear.Preconditioner.SymmetricMat
    domains:
    - type: LabelList
      values:
      - text: Symmetric
        value: Symmetric
      - text: Nonsymmetric
        value: Nonsymmetric
    type: string
  Solver_MaxConvergenceFailures:
    _help: This key gives the maximum number of convergence failures allowed. Each
      convergence failure cuts the timestep in half and the solver tries to advance
      the solution with the reduced timestep. The default value is 3. Note that setting
      this value to a value greater than 9 may result in errors in how time cycles
      are calculated. Time is discretized in terms of the base time unit and if the
      solver begins to take very small timesteps smallerthanbasetimeunit1000 the values
      based on time cycles will be change at slightly incorrect times. If the problem
      is failing converge so poorly that a large number of restarts are required,
      consider setting the timestep to a smaller value.
    _parflowId: Solver.MaxConvergenceFailures
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  Solver_MaxIter:
    _help: This key gives the maximum number of iterations that will be allowed for
      time-stepping. This is to prevent a run-away simulation.
    _parflowId: Solver.MaxIter
    type: int8
  Solver_MaxLevels:
    _help: '[Type: int]'
    _parflowId: Solver.MaxLevels
    type: float32
  Solver_MaxMinNX:
    _help: '[Type: int]'
    _parflowId: Solver.MaxMinNX
    type: float32
  Solver_MaxMinNY:
    _help: '[Type: int]'
    _parflowId: Solver.MaxMinNY
    type: float32
  Solver_MaxMinNZ:
    _help: '[Type: int]'
    _parflowId: Solver.MaxMinNZ
    type: float32
  Solver_NonlinearSolver:
    _help: '[Type: int]'
    _parflowId: Solver.NonlinearSolver
    type: float32
  Solver_Nonlinear_DerivativeEpsilon:
    _help: This key specifies the value of epsilon used in approximating the action
      of the Jacobian on a vector with approximate directional derivatives of the
      nonlinear function. This parameter is only used when the UseJacobian key is
      False.
    _parflowId: Solver.Nonlinear.DerivativeEpsilon
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_Nonlinear_EtaAlpha:
    _help: This key specifies the value of alpha for the case of EtaChoice being Walker2.
    _parflowId: Solver.Nonlinear.EtaAlpha
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_Nonlinear_EtaChoice:
    _help: This key specifies how the linear system tolerance will be selected. The
      linear system is solved until a relative residual reduction of n is achieved.
      Linear residual norms are measured in the l^2 norm. Choices for this key include
      EtaConstant, Walker1 and Walker2. If the choice EtaConstant is specified, then
      n will be taken as constant. The choices Walker1 and Walker2 specify choices
      for n developed by Eisenstat and Walker (see reference in manual). For both
      of the last two choices, n is never allowed to be less than 1e-4.
    _parflowId: Solver.Nonlinear.EtaChoice
    domains:
    - type: LabelList
      values:
      - text: EtaConstant
        value: EtaConstant
      - text: Walker1
        value: Walker1
      - text: Walker2
        value: Walker2
    type: string
  Solver_Nonlinear_EtaGamma:
    _help: This key specifies the value of gamma for the case of EtaChoice being Walker2.
    _parflowId: Solver.Nonlinear.EtaGamma
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_Nonlinear_EtaValue:
    _help: This key specifies the constant value of n for the EtaChoice key EtaConstant.
    _parflowId: Solver.Nonlinear.EtaValue
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_Nonlinear_FlowBarrierX:
    _help: This key specifies whether Flow Barriers are to be used in the X direction,
      the default is False. The default indicates a false or FBx value of one [-]
      everywhere in the domain.
    _parflowId: Solver.Nonlinear.FlowBarrierX
    type: string
  Solver_Nonlinear_FlowBarrierY:
    _help: This key specifies whether Flow Barriers are to be used in the Y direction,
      the default is False. The default indicates a false or FBy value of one [-]
      everywhere in the domain.
    _parflowId: Solver.Nonlinear.FlowBarrierY
    type: string
  Solver_Nonlinear_FlowBarrierZ:
    _help: This key specifies whether Flow Barriers are to be used in the Z direction,
      the default is False. The default indicates a false or FBz value of one [-]
      everywhere in the domain.
    _parflowId: Solver.Nonlinear.FlowBarrierZ
    type: string
  Solver_Nonlinear_Globalization:
    _help: This key specifies the type of global strategy to use. Possible choices
      for this key are InexactNewton and LineSearch. The choice InexactNewton specifies
      no global strategy, and the choice LineSearch specifies that a line search strategy
      should be used where the nonlinear step can be lengthened or decreased to satisfy
      certain criteria.
    _parflowId: Solver.Nonlinear.Globalization
    domains:
    - type: LabelList
      values:
      - text: LineSearch
        value: LineSearch
      - text: InexactNewton
        value: InexactNewton
    type: string
  Solver_Nonlinear_MaxIter:
    _help: This key specifies the maximum number of nonlinear iterations allowed before
      iterations stop with a convergence failure.
    _parflowId: Solver.Nonlinear.MaxIter
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - null
    type: int8
  Solver_Nonlinear_PrintFlag:
    _help: This key specifies the amount of informational data that is printed to
      the *.out.kinsol.log file. Choices for this key are NoVerbosity, LowVerbosity,
      NormalVerbosity and HighVerbosity. The choice NoVerbosity prints no statistics
      about the nonlinear convergence process. The choice LowVerbosity outputs the
      nonlinear iteration count, the scaled norm of the nonlinear function, and the
      number of function calls. The choice NormalVerbosity prints the same as for
      LowVerbosity and also the global strategy statistics. The choice HighVerbosity
      prints the same as for NormalVerbosity with the addition of further Krylov iteration
      statistics.
    _parflowId: Solver.Nonlinear.PrintFlag
    domains:
    - type: LabelList
      values:
      - text: NoVerbosity
        value: NoVerbosity
      - text: LowVerbosity
        value: LowVerbosity
      - text: NormalVerbosity
        value: NormalVerbosity
      - text: HighVerbosity
        value: HighVerbosity
    type: string
  Solver_Nonlinear_ResidualTol:
    _help: This key specifies the tolerance that measures how much the relative reduction
      in the nonlinear residual should be before nonlinear iterations stop. The magnitude
      of the residual is measured with the l1 (max) norm.
    _parflowId: Solver.Nonlinear.ResidualTol
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_Nonlinear_StepTol:
    _help: This key specifies the tolerance that measures how small the difference
      between two consecutive nonlinear steps can be before nonlinear iterations stop.
    _parflowId: Solver.Nonlinear.StepTol
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_Nonlinear_UseJacobian:
    _help: This key specifies whether the Jacobian will be used in matrix-vector products
      or whether a matrix-free version of the code will run. Choices for this key
      are False and True. Using the Jacobian will most likely decrease the number
      of nonlinear iterations but require more memory to run.
    _parflowId: Solver.Nonlinear.UseJacobian
    type: string
  Solver_Nonlinear_VariableDz:
    _help: This key specifies whether dZ multipliers are to be used, the default is
      False. The default indicates a false or non-active variable dz and each layer
      thickness is 1.0 [L].
    _parflowId: Solver.Nonlinear.VariableDz
    type: string
  Solver_OverlandDiffusive_Epsilon:
    _help: This key provides a minimum value for the Sf used in the OverlandDiffusive
      boundary condition.
    _parflowId: Solver.OverlandDiffusive.Epsilon
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_OverlandKinematic_Epsilon:
    _help: This key provides a minimum value for the Sf used in the OverlandKinematic
      boundary condition.
    _parflowId: Solver.OverlandKinematic.Epsilon
    domains:
    - level: 1
      type: Range
      value_range:
      - 0.0
      - null
    type: float32
  Solver_PolyDegree:
    _help: '[Type: int]'
    _parflowId: Solver.PolyDegree
    type: float32
  Solver_PolyPC:
    _help: '[Type: int]'
    _parflowId: Solver.PolyPC
    type: float32
  Solver_PrintCLM:
    _help: This key specifies whether the CLM writes two dimensional binary output
      files to a PFB binary format. Note that CLM must be compiled and linked at runtime
      for this option to be active. These files are all written according to the standard
      format used for all ParFlow variables, using the runname, and istep. Variables
      are either two-dimensional or over the number of CLM layers (default of ten).
    _parflowId: Solver.PrintCLM
    type: string
  Solver_PrintConcentration:
    _help: This key is used to turn on printing of the concentration data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    _parflowId: Solver.PrintConcentration
    type: string
  Solver_PrintDZMultiplier:
    _help: '[Type: int]'
    _parflowId: Solver.PrintDZMultiplier
    type: float32
  Solver_PrintEvapTrans:
    _help: '[Type: int]'
    _parflowId: Solver.PrintEvapTrans
    type: float32
  Solver_PrintEvapTransSum:
    _help: '[Type: int]'
    _parflowId: Solver.PrintEvapTransSum
    type: float32
  Solver_PrintLSMSink:
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    _parflowId: Solver.PrintLSMSink
    type: string
  Solver_PrintMannings:
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    _parflowId: Solver.PrintMannings
    type: string
  Solver_PrintMask:
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    _parflowId: Solver.PrintMask
    type: string
  Solver_PrintOverlandBCFlux:
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    _parflowId: Solver.PrintOverlandBCFlux
    type: string
  Solver_PrintOverlandSum:
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    _parflowId: Solver.PrintOverlandSum
    type: string
  Solver_PrintPressure:
    _help: This key is used to turn on printing of the pressure data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    _parflowId: Solver.PrintPressure
    type: string
  Solver_PrintSaturation:
    _help: This key is used to turn on printing of the saturation data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    _parflowId: Solver.PrintSaturation
    type: string
  Solver_PrintSlopes:
    _help: This key is used to turn on printing of the saturation data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    _parflowId: Solver.PrintSlopes
    type: string
  Solver_PrintSpecificStorage:
    _help: This key is used to turn on printing of the saturation data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    _parflowId: Solver.PrintSpecificStorage
    type: string
  Solver_PrintSubsurf:
    _help: This key is used to turn on printing of the subsurface data, Permeability
      and Porosity. The data is printed after it is generated and before the main
      time stepping loop - only once during the run. The data is written as a PFB
      file.
    _parflowId: Solver.PrintSubsurf
    type: string
  Solver_PrintSubsurfData:
    _help: This key is used to turn on printing of the subsurface data, Permeability
      and Porosity. The data is printed after it is generated and before the main
      time stepping loop - only once during the run. The data is written as a PFB
      file.
    _parflowId: Solver.PrintSubsurfData
    type: string
  Solver_PrintTop:
    _help: '?'
    _parflowId: Solver.PrintTop
    type: string
  Solver_PrintVelocities:
    _help: This key is used to turn on printing of the x,y, and z velocity data. The
      printing of the data is controlled by values in the timing information section.
      The data is written as a PFB file.
    _parflowId: Solver.PrintVelocities
    type: string
  Solver_PrintWells:
    _help: This key is used to turn on collection and printing of the well data. The
      data is collected at intervals given by values in the timing information section.
      Printing occurs at the end of the run when all collected data is written.
    _parflowId: Solver.PrintWells
    type: string
  Solver_RAPType:
    _help: '[Type: int]'
    _parflowId: Solver.RAPType
    type: float32
  Solver_RelTol:
    _help: This value gives the relative tolerance for the linear solve algorithm.
    _parflowId: Solver.RelTol
    type: float32
  Solver_SadvectOrder:
    _help: This key controls the order of the explicit method used in advancing the
      concentrations. This value can be either 1 for a standard upwind first order
      or 2 for a second order Godunov method.
    _parflowId: Solver.SadvectOrder
    domains:
    - level: 1
      type: Range
      value_range:
      - 1
      - 2
    type: int8
  Solver_SlopeAccountingCLM:
    _help: This key specifies whether the CLM allows for the inclusion of slopes when
      determining solar zenith angles. Note that CLM must be compiled and linked at
      runtime for this option to be active.
    _parflowId: Solver.SlopeAccountingCLM
    type: string
  Solver_Smoother:
    _help: '[Type: int]'
    _parflowId: Solver.Smoother
    type: float32
  Solver_Spinup:
    _help: '[Type: boolean]'
    _parflowId: Solver.Spinup
    type: string
  Solver_Symmetric:
    _help: '[Type: int]'
    _parflowId: Solver.Symmetric
    type: float32
  Solver_TerrainFollowingGrid:
    _help: "This key specifies that a terrain-following coordinate transform is used\
      \ for solver Richards. This key sets x and y subsurface slopes to be the same\
      \ as the Topographic slopes (a value of False sets these subsurface slopes to\
      \ zero). These slopes are used in the Darcy fluxes to add a density, gravity\
      \ -dependent term. This key will not change the output files (that is the output\
      \ is still orthogonal) or the geometries (they will still follow the computational\
      \ grid)\u2013 these two things are both to do items. This key only changes solver\
      \ Richards, not solver Impes."
    _parflowId: Solver.TerrainFollowingGrid
    type: string
  Solver_TerrainFollowingGrid_SlopeUpwindFormulation:
    _help: This key specifies optional modifications to the terrain following grid
      formulation (Equation 5.8) . Choices for this key are Original, Upwind, UpwindSine.
      Original is the original TFG formulation shown in Equation 5.8 in the manual.
      The Original option calculates the theta-x and theta-y for a cell face as the
      average of the two adjacent cell slopes (i.e. assuming a cell centered slope
      calculation). The Upwind option uses the the theta-x and theta-y of a cell directly
      without averaging (i.e. assuming a face centered slope calculation). The UpwindSine
      is the same as the Upwind option but it also removes the Sine term from 5.8.
      Note the UpwindSine option is for experimental purposes only and should not
      be used in standard simulations. Also note that the choice of upwind orOriginal
      formulation should consistent with the choice of overland flow boundary condition
      if overland flow is being used. The upwind and UpwindSine are consistent with
      OverlandDiffusive and OverlandKinematic while Original is consistent with OverlandFlow.
    _parflowId: Solver.TerrainFollowingGrid.SlopeUpwindFormulation
    domains:
    - type: LabelList
      values:
      - text: Original
        value: Original
      - text: Upwind
        value: Upwind
      - text: UpwindSine
        value: UpwindSine
    type: string
  Solver_TwoNorm:
    _help: '[Type: int]'
    _parflowId: Solver.TwoNorm
    type: float32
  Solver_Weight:
    _help: '[Type: int]'
    _parflowId: Solver.Weight
    type: float32
  Solver_WriteCLMBinary:
    _help: This key specifies whether the CLM writes two dimensional binary output
      files in a generic binary format. Note that CLM must be compiled and linked
      at runtime for this option to be active.
    _parflowId: Solver.WriteCLMBinary
    type: string
  Solver_WritePfbMannings:
    _help: This key is used to turn on collection and printing of the mannings coefficients
      into a PFB file.
    _parflowId: Solver.WritePfbMannings
    type: string
  Solver_WritePfbSlopes:
    _help: This key is used to turn on collection and printing of the slopes into
      a PFB file.
    _parflowId: Solver.WritePfbSlopes
    type: string
  Solver_WriteSiloCLM:
    _help: This key specifies whether the CLM writes two dimensional binary output
      files to a silo binary format. This data may be read in by VisIT and other visualization
      packages. Note that CLM and silo must be compiled and linked at runtime for
      this option to be active. These files are all written according to the standard
      format used for all ParFlow variables, using the runname, and istep. Variables
      are either two-dimensional or over the number of CLM layers (default of ten).
    _parflowId: Solver.WriteSiloCLM
    type: string
  Solver_WriteSiloConcentration:
    _help: This key is used to specify printing of the concentration data in silo
      binary format. The printing of the data is controlled by values in the timing
      information section.
    _parflowId: Solver.WriteSiloConcentration
    type: string
  Solver_WriteSiloDZMultiplier:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloDZMultiplier
    type: string
  Solver_WriteSiloEvapTrans:
    _help: This key is used to specify printing of the evaporation and rainfall flux
      data using silo binary format. This data comes from either clm or from external
      calls to ParFlow such as WRF. This data is in units of [L3T-1]. The printing
      of the data is controlled by values in the timing information section.
    _parflowId: Solver.WriteSiloEvapTrans
    type: string
  Solver_WriteSiloEvapTransSum:
    _help: This key is used to specify printing of the evaporation and rainfall flux
      data using silo binary format as a running, cumulative amount. This data comes
      from either clm or from external calls to ParFlow such as WRF. This data is
      in units of [L3]. The printing of the data is controlled by values in the timing
      information section.
    _parflowId: Solver.WriteSiloEvapTransSum
    type: string
  Solver_WriteSiloMannings:
    _help: "This key is used to specify printing of the Manning\u2019s roughness data\
      \ in silo binary format. The printing of the data is controlled by values in\
      \ the timing information section."
    _parflowId: Solver.WriteSiloMannings
    type: string
  Solver_WriteSiloMask:
    _help: This key is used to specify printing of the mask data using silo binary
      format. The mask contains values equal to one for active cells and zero for
      inactive cells. The printing of the data is controlled by values in the timing
      information section.
    _parflowId: Solver.WriteSiloMask
    type: string
  Solver_WriteSiloOverlandBCFlux:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloOverlandBCFlux
    type: string
  Solver_WriteSiloOverlandSum:
    _help: This key is used to specify calculation and printing of the total overland
      outflow from the domain using silo binary format as a running cumulative amount.
      This is integrated along all domain boundaries and is calculated any location
      that slopes at the edge of the domain point outward. This data is in units of
      [L3]. The printing of the data is controlled by values in the timing information
      section.
    _parflowId: Solver.WriteSiloOverlandSum
    type: string
  Solver_WriteSiloPMPIOConcentration:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOConcentration
    type: string
  Solver_WriteSiloPMPIODZMultiplier:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIODZMultiplier
    type: string
  Solver_WriteSiloPMPIOEvapTrans:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOEvapTrans
    type: string
  Solver_WriteSiloPMPIOEvapTransSum:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOEvapTransSum
    type: string
  Solver_WriteSiloPMPIOMannings:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOMannings
    type: string
  Solver_WriteSiloPMPIOMask:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOMask
    type: string
  Solver_WriteSiloPMPIOOverlandBCFlux:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOOverlandBCFlux
    type: string
  Solver_WriteSiloPMPIOOverlandSum:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOOverlandSum
    type: string
  Solver_WriteSiloPMPIOPressure:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOPressure
    type: string
  Solver_WriteSiloPMPIOSaturation:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOSaturation
    type: string
  Solver_WriteSiloPMPIOSlopes:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOSlopes
    type: string
  Solver_WriteSiloPMPIOSpecificStorage:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOSpecificStorage
    type: string
  Solver_WriteSiloPMPIOSubsurfData:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOSubsurfData
    type: string
  Solver_WriteSiloPMPIOTop:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOTop
    type: string
  Solver_WriteSiloPMPIOVelocities:
    _help: '[Type: boolean/string]'
    _parflowId: Solver.WriteSiloPMPIOVelocities
    type: string
  Solver_WriteSiloPressure:
    _help: This key is used to specify printing of the pressure data in silo binary
      format. The printing of the data is controlled by values in the timing information
      section. This data may be read in by VisIT and other visualization packages.
    _parflowId: Solver.WriteSiloPressure
    type: string
  Solver_WriteSiloSaturation:
    _help: This key is used to specify printing of the saturation data using silo
      binary format. The printing of the data is controlled by values in the timing
      information section.
    _parflowId: Solver.WriteSiloSaturation
    type: string
  Solver_WriteSiloSlopes:
    _help: This key is used to turn on printing of the x adn y slope data in silo
      binary format. The printing of the data is controlled by values in the timing
      information section. The data is written as a PFB file.
    _parflowId: Solver.WriteSiloSlopes
    type: string
  Solver_WriteSiloSpecificStorage:
    _help: This key is used to specify printing of the specific storage data in silo
      binary format. The printing of the data is controlled by values in the timing
      information section.
    _parflowId: Solver.WriteSiloSpecificStorage
    type: string
  Solver_WriteSiloSubsurfData:
    _help: This key is used to specify printing of the subsurface data, Permeability
      and Porosity in silo binary file format. The data is printed after it is generated
      and before the main time stepping loop - only once during the run. This data
      may be read in by VisIT and other visualization packages.
    _parflowId: Solver.WriteSiloSubsurfData
    type: string
  Solver_WriteSiloTop:
    _help: This key is used to turn on printing of the x,y, and z velocity data. The
      printing of the data is controlled by values in the timing information section.
      The data is written as a PFB file.
    _parflowId: Solver.WriteSiloTop
    type: string
  Solver_WriteSiloVelocities:
    _help: This key is used to turn on printing of the x,y, and z velocity data in
      silo binary format. The printing of the data is controlled by values in the
      timing information section. The data is written as a PFB file.
    _parflowId: Solver.WriteSiloVelocities
    type: string
