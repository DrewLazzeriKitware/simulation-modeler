Solver:
  Solver:
    _parflowId: Solver
    _help: ParFlow can operate using a number of different solvers. Two of these solvers,
      IMPES (running in single-phase, fully-saturated mode, not multiphase) and RICHARDS
      (running in variably-saturated mode, not multiphase, with the options of land
      surface processes and coupled overland flow) are detailed below. This is a brief
      summary of solver settings used to simulate under three sets of conditions,
      fully-saturated, variably saturated and variably-saturated with overland flow.
      To simulate fully saturated, steady-state conditions set the solver to IMPES.
      This is also the default solver in ParFlow, so if no solver is specified, the
      code solves using IMPES. To simulate variably-saturated, transient conditions,
      using Richardsâ€™ equation, variably/fully saturated, transient with compressible
      storage set the solver to RICHARDS. This is also the solver used to simulate
      surface flow or coupled surface-subsurface flow.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Impes
            value: Impes
          - text: Richards
            value: Richards
  Solver_AbsTol:
    _parflowId: Solver.AbsTol
    _help: This value gives the absolute tolerance for the linear solve algorithm.
    type: float32
  Solver_AdvectOrder:
    _parflowId: Solver.AdvectOrder
    _help: This key controls the order of the explicit method used in advancing the
      concentrations. This value can be either 1 for a standard upwind first order
      or 2 for a second order Godunov method.
    type: int8
  Solver_BetaFluid:
    _parflowId: Solver.BetaFluid
    _help: '[Type: int]'
    type: float32
  Solver_BetaFracture:
    _parflowId: Solver.BetaFracture
    _help: '[Type: int]'
    type: float32
  Solver_BetaPerm:
    _parflowId: Solver.BetaPerm
    _help: '[Type: int]'
    type: float32
  Solver_BetaPore:
    _parflowId: Solver.BetaPore
    _help: '[Type: int]'
    type: float32
  Solver_BoxSizePowerOf2:
    _parflowId: Solver.BoxSizePowerOf2
    _help: '[Type: int]'
    type: float32
  Solver_CFL:
    _parflowId: Solver.CFL
    _help: This key gives the value of the weight put on the computed CFL limit before
      computing a global timestep value. Values greater than 1 are not suggested and
      in fact because this is an approximation, values slightly less than 1 can also
      produce instabilities.
    type: float32
  Solver_CLM_BinaryOutDir:
    _parflowId: Solver.CLM.BinaryOutDir
    _help: This key specifies whether the CLM writes each set of two dimensional binary
      output files to a corresponding directory. These directories my be created before
      ParFlow is run (using the tcl script, for example). Choices for this key include
      True and False. Note that CLM must be compiled and linked at runtime for this
      option to be active.
    type: string
  Solver_CLM_CLMDumpInterval:
    _parflowId: Solver.CLM.CLMDumpInterval
    _help: This key specifies how often output from the CLM is written. This key is
      in integer multipliers of the CLM timestep. Note that CLM must be compiled and
      linked at runtime for this option to be active.
    type: int8
  Solver_CLM_CLMFileDir:
    _parflowId: Solver.CLM.CLMFileDir
    _help: This key specifies what directory all output from the CLM is written to.
      This key may be set to "./" or "" to write output to the ParFlow run directory.
      This directory must be created before ParFlow is run. Note that CLM must be
      compiled and linked at runtime for this option to be active.
    type: string
  Solver_CLM_DailyRST:
    _parflowId: Solver.CLM.DailyRST
    _help: Controls whether CLM writes daily restart files (default) or at every time
      step when set to False; outputs are numbered according to the istep from ParFlow.
      If ReuseCount=n, with n greater than 1, the output will be written every n steps
      (i.e. it still writes hourly restart files if your time step is 0.5 or 0.25,
      etc...). Fully compatible with WriteLastRST=False so that each daily output
      is overwritten to time 00000 in restart file name.00000.p where p is the processor
      number.
    type: string
  Solver_CLM_EvapBeta:
    _parflowId: Solver.CLM.EvapBeta
    _help: This key specifies the form of the bare soil evaporation parameter in CLM.
      The valid types for this key are None, Linear, Cosine.
    type: string
    domains:
      - type: LabelList
        values:
          - text: None
            value: None
          - text: Linear
            value: Linear
          - text: Cosine
            value: Cosine
  Solver_CLM_FieldCapacity:
    _parflowId: Solver.CLM.FieldCapacity
    _help: This key specifies the field capacity for the beta-t function in CLM. Note
      that the units for this function are pressure [m] for a Pressure formulation
      and saturation [-] for a Saturation formulation. Note that CLM must be compiled
      and linked at runtime for this option to be active.
    type: float32
  Solver_CLM_ForceVegetation:
    _parflowId: Solver.CLM.ForceVegetation
    _help: 'This key specifies whether vegetation should be forced in CLM. Currently
      this option only works for 1D and 3D forcings, as specified by the key Solver.CLM.MetForcing.
      Choices for this key include True and False. Forced vegetation variables are
      : LAI: Leaf Area Index [-] SAI: Stem Area Index [-] Z0M: Aerodynamic roughness
      length [m] DISPLA: Displacement height [m] In the case of 1D meteorological
      forcings, CLM requires four files for vegetation time series and one vegetation
      map. The four files should be named respectively lai.dat, sai.dat, z0m.dat,
      displa.dat. They are ASCII files and contain 18 time-series columns (one per
      IGBP vegetation class, and each timestep per row). The vegetation map should
      be a properly distributed 2D ParFlow binary file (.pfb) which contains vegetation
      indices (from 1 to 18). The vegetation map filename is veg_map.pfb. ParFlow
      uses the vegetation map to pass to CLM a 2D map for each vegetation variable
      at each time step. In the case of 3D meteorological forcings, ParFlow expects
      four distincts properly distributed ParFlow binary file (.pfb), the third dimension
      being the timesteps. The files should be named LAI.pfb, SAI.pfb, Z0M.pfb, DISPLA.pfb.
      No vegetation map is needed in this case.'
    type: string
  Solver_CLM_FstepStart:
    _parflowId: Solver.CLM.FstepStart
    _help: '[Type: int]'
    type: float32
  Solver_CLM_IrrigationCycle:
    _parflowId: Solver.CLM.IrrigationCycle
    _help: This key specifies the cycle of the irrigation in CLM. The valid types
      for this key are Constant, Deficit. Note only Constant is currently implemented.
      Constant cycle applies irrigation each day from IrrigationStartTime to IrrigationStopTime
      in GMT.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Constant
            value: Constant
          - text: Deficit
            value: Deficit
  Solver_CLM_IrrigationRate:
    _parflowId: Solver.CLM.IrrigationRate
    _help: This key specifies the rate of the irrigation in CLM in [mm/s].
    type: float32
  Solver_CLM_IrrigationStartTime:
    _parflowId: Solver.CLM.IrrigationStartTime
    _help: This key specifies the start time of the irrigation in CLM GMT.
    type: float32
  Solver_CLM_IrrigationStopTime:
    _parflowId: Solver.CLM.IrrigationStopTime
    _help: This key specifies the stop time of the irrigation in CLM GMT.
    type: float32
  Solver_CLM_IrrigationThreshold:
    _parflowId: Solver.CLM.IrrigationThreshold
    _help: This key specifies the threshold value for the irrigation in CLM [-].
    type: float32
  Solver_CLM_IrrigationThresholdType:
    _parflowId: Solver.CLM.IrrigationThresholdType
    _help: '[Type: string]'
    type: float32
  Solver_CLM_IrrigationType:
    _parflowId: Solver.CLM.IrrigationType
    _help: This key specifies the form of the irrigation in CLM. The valid types for
      this key are none, Spray, Drip, Instant.
    type: string
    domains:
      - type: LabelList
        values:
          - text: none
            value: none
          - text: Spray
            value: Spray
          - text: Drip
            value: Drip
          - text: Instant
            value: Instant
  Solver_CLM_IstepStart:
    _parflowId: Solver.CLM.IstepStart
    _help: This key specifies the value of the counter, istep in CLM. This key primarily
      determines the start of the output counter for CLM.It is used to restart a run
      by setting the key to the ending step of the previous run plus one. Note that
      CLM must be compiled and linked at runtime for this option to be active.
    type: int8
  Solver_CLM_MetFileNT:
    _parflowId: Solver.CLM.MetFileNT
    _help: This key specifies the number of timesteps per file for 3D forcing data.
    type: int8
  Solver_CLM_MetFileName:
    _parflowId: Solver.CLM.MetFileName
    _help: 'This key specifies defines the file name for 1D, 2D or 3D forcing data.
      1D meteorological forcing files are text files with single columns for each
      variable and each timestep per row, while 2D and 3D forcing files are distributed
      ParFlow binary files, one for each variable and timestep (2D) or one for each
      variable and multiple timesteps (3D). Behavior of this key is different for
      1D and 2D and 3D cases, as sepcified by the Solver.CLM.MetForcing key above.
      For 1D cases, it is the FULL FILE NAME. Note that in this configuration, this
      forcing file is not distributed, the user does not provide copies such as narr.1hr.txt.0,
      narr.1hr.txt.1 for each processor. ParFlow only needs the single original file
      (e.g. narr.1hr.txt). For 2D cases, this key is the BASE FILE NAME for the 2D
      forcing files, currently set to NLDAS, with individual files determined as follows
      NLDAS.<variable>.<time step>.pfb. Where the <variable> is the forcing variable
      and <timestep> is the integer file counter corresponding to istep above. Forcing
      is needed for following variables: DSWR: Downward Visible or Short-Wave radiation
      [W/m2]. DLWR: Downward Infa-Red or Long-Wave radiation [W/m2] APCP: Precipitation
      rate [mm/s] Temp: Air temperature [K] UGRD: West-to-East or U-component of wind
      [m/s] VGRD: South-to-North or V-component of wind [m/s] Press: Atmospheric Pressure
      [pa] SPFH: Water-vapor specific humidity [kg/kg] Note that CLM must be compiled
      and linked at runtime for this option to be active.'
    type: string
  Solver_CLM_MetFilePath:
    _parflowId: Solver.CLM.MetFilePath
    _help: This key specifies defines the location of 1D, 2D or 3D forcing data. For
      1D cases, this is the path to a single forcing file (e.g. narr.1hr.txt). For
      2D and 3D cases, this is the path to the directory containing all forcing files.
      Note that CLM must be compiled and linked at runtime for this option to be active.
    type: string
  Solver_CLM_MetFileSubdir:
    _parflowId: Solver.CLM.MetFileSubdir
    _help: '[Type: int]'
    type: float32
  Solver_CLM_MetForcing:
    _parflowId: Solver.CLM.MetForcing
    _help: This key specifies defines whether 1D (uniform over the domain), 2D (spatially
      distributed) or 3D (spatially distributed with multiple timesteps per .pfb forcing
      file) forcing data is used. Choices for this key are 1D, 2D and 3D. This key
      has no default so the user must set it to 1D, 2D or 3D. Failure to set this
      key will cause CLM to still be run but with unpredictable values causing CLM
      to eventually crash. 1D meteorological forcing files are text files with single
      columns for each variable and each timestep per row, while 2D forcing files
      are distributed ParFlow binary files, one for each variable and timestep. File
      names are specified in the Solver.CLM.MetFileName variable below. Note that
      CLM must be compiled and linked at runtime for this option to be active.
    type: string
    domains:
      - type: LabelList
        values:
          - text: 1D
            value: 1D
          - text: 2D
            value: 2D
          - text: 3D
            value: 3D
  Solver_CLM_Print1dOut:
    _parflowId: Solver.CLM.Print1dOut
    _help: This key specifies whether the CLM one dimensional (averaged over each
      processor) output file is written or not. Choices for this key include True
      and False. Note that CLM must be compiled and linked at runtime for this option
      to be active.
    type: string
  Solver_CLM_ResSat:
    _parflowId: Solver.CLM.ResSat
    _help: This key specifies the residual saturation for the saturation function
      in CLM. Note that CLM must be compiled and linked at runtime for this option
      to be active.
    type: float32
  Solver_CLM_ReuseCount:
    _parflowId: Solver.CLM.ReuseCount
    _help: How many times to reuse a CLM atmospheric forcing file input. For example
      timestep=1, reuse =1 is normal behavior but reuse=2 and timestep=0.5 subdivides
      the time step using the same CLM input for both halves instead of needing two
      files. This is particually useful for large, distributed runs when the user
      wants to run ParFlow at a smaller timestep than the CLM forcing. Forcing files
      will be re-used and total fluxes adjusted accordingly without needing duplicate
      files.
    type: int8
  Solver_CLM_RootZoneNZ:
    _parflowId: Solver.CLM.RootZoneNZ
    _help: This key sets the number of soil layers the ParFlow expects from CLM. It
      will allocate and format all the arrays for passing variables to and from CLM
      accordingly. This value now sets the CLM number as well so recompilation is
      not required anymore. Most likely the key Solver.CLM.SoiLayer will also need
      to be changed.
    type: int8
  Solver_CLM_RZWaterStress:
    _parflowId: Solver.CLM.RZWaterStress
    _help: '[Type: ???]'
    type: string
  Solver_CLM_SingleFile:
    _parflowId: Solver.CLM.SingleFile
    _help: Controls whether ParFlow writes all CLM output variables as a single file
      per time step. When "True", this combines the output of all the CLM output variables
      into a special multi-layer PFB with the file extension ".C.pfb". The first 13
      layers correspond to the 2-D CLM outputs and the remaining layers are the soil
      temperatures in each layer. For example, a model with 4 soil layers will create
      a SingleFile CLM output with 17 layers at each time step. The file pseudo code
      is given below in Â§ 6.4 and the variables and units are as specified in the
      multiple PFB and SILO formats as above.
    type: string
  Solver_CLM_SoiLayer:
    _parflowId: Solver.CLM.SoiLayer
    _help: This key sets the soil layer, and thus the soil depth, that CLM uses for
      the seasonal temperature adjustment for all leaf and stem area indices.
    type: int8
  Solver_CLM_VegWaterStress:
    _parflowId: Solver.CLM.VegWaterStress
    _help: This key specifies the form of the plant water stress function parameter
      in CLM. The valid types for this key are None, Saturation, Pressure.
    type: string
    domains:
      - type: LabelList
        values:
          - text: None
            value: None
          - text: Saturation
            value: Saturation
          - text: Pressure
            value: Pressure
  Solver_CLM_WiltingPoint:
    _parflowId: Solver.CLM.WiltingPoint
    _help: This key specifies the wilting point for the bets-t function in CLM. Note
      that the units for this function are pressure [m] for a Pressure formulation
      and saturation [-] for a Saturation formulation. Note that CLM must be compiled
      and linked at runtime for this option to be active.
    type: float32
  Solver_CLM_WriteLastRST:
    _parflowId: Solver.CLM.WriteLastRST
    _help: Controls whether CLM restart files are sequentially written or whether
      a single file restart file name.00000.p is overwritten each time the restart
      file is output, where p is the processor number. If "True" only one file is
      written/overwritten and if "False" outputs are written more frequently. Compatible
      with DailyRST and ReuseCount; for the latter, outputs are written every n steps
      where n is the value of ReuseCount.
    type: string
  Solver_CLM_WriteLogs:
    _parflowId: Solver.CLM.WriteLogs
    _help: 'When False, this disables writing of the CLM output log files for each
      processor. For example, in the clm.tcl test case, if this flag is added False,
      washita.output.txt.p and washita.para.out.dat.p (were p is the processor #)
      are not created, assuming washita is the run name.'
    type: string
  Solver_CLM_OverwriteDrvClmin:
    _parflowId: Solver.CLM.OverwriteDrvClmin
    _help: When False, the `drv_clmin.dat` file will not be overwritten, except when
      it was automatically generated by pftools. If the user modifies variables that
      would have affected the file, and the file is not overwritten, a warning will
      be printed, so the user will know that their changes will not be reflected in
      the calculation.
    type: string
  Solver_CLM_OverwriteDrvVegp:
    _parflowId: Solver.CLM.OverwriteDrvVegp
    _help: When False, the `drv_vegp.dat` file will not be overwritten, except when
      it was automatically generated by pftools. If the user modifies variables that
      would have affected the file, and the file is not overwritten, a warning will
      be printed, so the user will know that their changes will not be reflected in
      the calculation.
    type: string
  Solver_CLM_OverwriteDrvVegm:
    _parflowId: Solver.CLM.OverwriteDrvVegm
    _help: When False, the `drv_vegm.dat` file will not be overwritten, except when
      it was automatically generated by pftools. If the user modifies variables that
      would have affected the file, and the file is not overwritten, a warning will
      be printed, so the user will know that their changes will not be reflected in
      the calculation.
    type: string
  Solver_CLM_Input_Timing_RestartCode:
    _parflowId: Solver.CLM.Input.Timing.RestartCode
    _help: 1 = starting timing from a restart file, 2 = timing is defined in the script
    type: int8
  Solver_CLM_Input_Timing_StartDate:
    _parflowId: Solver.CLM.Input.Timing.StartDate
    _help: Helper property that will set StartYear/StartMonth/StartDay
  Solver_CLM_Input_Timing_StartYear:
    _parflowId: Solver.CLM.Input.Timing.StartYear
    _help: Starting year of CLM data.
    type: int8
  Solver_CLM_Input_Timing_StartMonth:
    _parflowId: Solver.CLM.Input.Timing.StartMonth
    _help: Starting month of CLM data.
    type: int8
  Solver_CLM_Input_Timing_StartDay:
    _parflowId: Solver.CLM.Input.Timing.StartDay
    _help: Starting day of CLM data.
    type: int8
  Solver_CLM_Input_Timing_StartTime:
    _parflowId: Solver.CLM.Input.Timing.StartTime
    _help: Helper property that will set StartHour:StartMinute:StartSecond
  Solver_CLM_Input_Timing_StartHour:
    _parflowId: Solver.CLM.Input.Timing.StartHour
    _help: Starting hour of CLM data.
    type: int8
  Solver_CLM_Input_Timing_StartMinute:
    _parflowId: Solver.CLM.Input.Timing.StartMinute
    _help: Starting minute of CLM data.
    type: int8
  Solver_CLM_Input_Timing_StartSecond:
    _parflowId: Solver.CLM.Input.Timing.StartSecond
    _help: Starting second of CLM data.
    type: int8
  Solver_CLM_Input_Timing_EndDate:
    _parflowId: Solver.CLM.Input.Timing.EndDate
    _help: Helper property that will set EndYear/EndMonth/EndDay
  Solver_CLM_Input_Timing_EndYear:
    _parflowId: Solver.CLM.Input.Timing.EndYear
    _help: Ending year of CLM data.
    type: int8
  Solver_CLM_Input_Timing_EndMonth:
    _parflowId: Solver.CLM.Input.Timing.EndMonth
    _help: Ending month of CLM data.
    type: int8
  Solver_CLM_Input_Timing_EndDay:
    _parflowId: Solver.CLM.Input.Timing.EndDay
    _help: Ending day of CLM data.
    type: int8
  Solver_CLM_Input_Timing_EndTime:
    _parflowId: Solver.CLM.Input.Timing.EndTime
    _help: Helper property that will set EndHour:EndMinute:EndSecond
  Solver_CLM_Input_Timing_EndHour:
    _parflowId: Solver.CLM.Input.Timing.EndHour
    _help: Ending hour of CLM data.
    type: int8
  Solver_CLM_Input_Timing_EndMinute:
    _parflowId: Solver.CLM.Input.Timing.EndMinute
    _help: Ending minute of CLM data.
    type: int8
  Solver_CLM_Input_Timing_EndSecond:
    _parflowId: Solver.CLM.Input.Timing.EndSecond
    _help: Ending second of CLM data.
    type: int8
  Solver_CLM_Input_ICSource_Code:
    _parflowId: Solver.CLM.Input.ICSource.Code
    _help: Initial condition specification (1) restart file, (2) drv_clmin.dat file
    type: int8
  Solver_CLM_Input_Domain_MaxTiles:
    _parflowId: Solver.CLM.Input.Domain.MaxTiles
    _help: Maximum tiles per grid (originally 3; changed it, because we have one type
      per cell)
    type: int8
  Solver_CLM_Input_Domain_MinGridArea:
    _parflowId: Solver.CLM.Input.Domain.MinGridArea
    _help: Min grid area for tile (%)
    type: float32
  Solver_CLM_Input_Domain_UndefinedValue:
    _parflowId: Solver.CLM.Input.Domain.UndefinedValue
    _help: Undefined value
    type: int8
  Solver_CLM_Input_Domain_VegClassification:
    _parflowId: Solver.CLM.Input.Domain.VegClassification
    _help: Vegetation Classification Scheme (1=UMD,2=IGBP,etc.) NOT the index
    type: int8
  Solver_CLM_Input_File_VegTileSpecification:
    _parflowId: Solver.CLM.Input.File.VegTileSpecification
    _help: Vegetation Tile Specification File
    type: string
  Solver_CLM_Input_File_VegTypeParameter:
    _parflowId: Solver.CLM.Input.File.VegTypeParameter
    _help: Vegetation Type Parameter File
    type: string
  Solver_CLM_Input_File_MetInput:
    _parflowId: Solver.CLM.Input.File.MetInput
    _help: Meterologic input file- valdai 3 hr
    type: string
  Solver_CLM_Input_File_Output:
    _parflowId: Solver.CLM.Input.File.Output
    _help: CLM output file
    type: string
  Solver_CLM_Input_File_ParamOutput:
    _parflowId: Solver.CLM.Input.File.ParamOutput
    _help: CLM 1D Parameter Output File
    type: string
  Solver_CLM_Input_File_ActiveRestart:
    _parflowId: Solver.CLM.Input.File.ActiveRestart
    _help: CLM active restart file
    type: string
  Solver_CLM_Input_InitCond_Temperature:
    _parflowId: Solver.CLM.Input.InitCond.Temperature
    _help: Initial temperature [K]
    type: int8
  Solver_CLM_Input_InitCond_SnowCover:
    _parflowId: Solver.CLM.Input.InitCond.SnowCover
    _help: '[Type: int]'
    type: int8
  Solver_CLM_Input_OutputVars_Surface:
    _parflowId: Solver.CLM.Input.OutputVars.Surface
    _help: Number of surface diagnostic variables to output
    type: int8
  Solver_CLM_Input_OutputVars_Soil:
    _parflowId: Solver.CLM.Input.OutputVars.Soil
    _help: Number of soil layer diagnostic variables to output
    type: int8
  Solver_CLM_Input_OutputVars_Snow:
    _parflowId: Solver.CLM.Input.OutputVars.Snow
    _help: Number of snow layer diagnostic variables to output
    type: int8
  Solver_CLM_Input_Forcing_WindObsHeight:
    _parflowId: Solver.CLM.Input.Forcing.WindObsHeight
    _help: Observational height of wind [m]
    type: float32
  Solver_CLM_Input_Forcing_TempObsHeight:
    _parflowId: Solver.CLM.Input.Forcing.TempObsHeight
    _help: Observational height of temperature [m]
    type: float32
  Solver_CLM_Input_Forcing_HumObsHeight:
    _parflowId: Solver.CLM.Input.Forcing.HumObsHeight
    _help: Observational height of humidity [m]
    type: float32
  Solver_CLM_Input_Vegetation_MaxDew:
    _parflowId: Solver.CLM.Input.Vegetation.MaxDew
    _help: Maximum allowed dew [mm]
    type: float32
  Solver_CLM_Input_Vegetation_MaxTranspiration:
    _parflowId: Solver.CLM.Input.Vegetation.MaxTranspiration
    _help: Maximum possible transpiration rate [mm/s]
    type: float32
  Solver_CLM_Input_Vegetation_RootFraction:
    _parflowId: Solver.CLM.Input.Vegetation.RootFraction
    _help: Root Fraction (depth average)
    type: float32
  Solver_CLM_Input_RoughnessLength_Soil:
    _parflowId: Solver.CLM.Input.RoughnessLength.Soil
    _help: Roughness length for soil [m]
    type: float32
  Solver_CLM_Input_RoughnessLength_Snow:
    _parflowId: Solver.CLM.Input.RoughnessLength.Snow
    _help: Roughness length for snow [m]
    type: float32
  Solver_CLM_Input_RoughnessLength_DragCanopySoil:
    _parflowId: Solver.CLM.Input.RoughnessLength.DragCanopySoil
    _help: Drag coefficient for soil under canopy [-]
    type: float32
  Solver_CLM_Input_NumericalParams_TuningFactor:
    _parflowId: Solver.CLM.Input.NumericalParams.TuningFactor
    _help: Tuning factor to turn first layer T into surface T
    type: float32
  Solver_CLM_Input_NumericalParams_CNFactor:
    _parflowId: Solver.CLM.Input.NumericalParams.CNFactor
    _help: Crank Nicholson factor between 0 and 1
    type: float32
  Solver_CLM_Input_NumericalParams_MinSoilPotential:
    _parflowId: Solver.CLM.Input.NumericalParams.MinSoilPotential
    _help: Restriction for min of soil poten. (mm)
    type: float32
  Solver_CLM_Input_NumericalParams_IrrSnowSat:
    _parflowId: Solver.CLM.Input.NumericalParams.IrrSnowSat
    _help: Irreducible water saturation of snow
    type: float32
  Solver_CLM_Input_NumericalParams_WaterImpermeable:
    _parflowId: Solver.CLM.Input.NumericalParams.WaterImpermeable
    _help: Water impermeable if porosity < wimp
    type: float32
  Solver_CLM_Vegetation_Parameters_LandNames:
    _parflowId: Solver.CLM.Vegetation.Parameters.LandNames
    _help: List of names of land use cover types for building the drv_vegp.dat file.
      Defaults to the 18 IGBP classification types.
    type: string
  Solver_CLM_Vegetation_Map_Latitude_Type:
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Type
    _help: Specifies the type of latitude specification for CLM. Valid types are 'Constant',
      'Linear', and 'PFBFile'.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Constant
            value: Constant
          - text: Linear
            value: Linear
          - text: PFBFile
            value: PFBFile
  Solver_CLM_Vegetation_Map_Latitude_Value:
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Value
    _help: Specifies the constant value (in decimal degrees) of the latitude for your
      domain, if Solver.CLM.Vegetation.Map.Latitude.Type was set to 'Constant'.
    type: float32
  Solver_CLM_Vegetation_Map_Latitude_FileName:
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.FileName
    _help: Specifies the PFB filename of the latitude for your domain, if Solver.CLM.Vegetation.Map.Latitude.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the latitude
      values (in decimal degrees) in each of the grid cells.
    type: string
  Solver_CLM_Vegetation_Map_Latitude_Min:
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Min
    _help: Specifies the value (in decimal degrees) of the minimum latitude for your
      domain, if Solver.CLM.Vegetation.Map.Latitude.Type was set to 'Linear'.
    type: float32
  Solver_CLM_Vegetation_Map_Latitude_Max:
    _parflowId: Solver.CLM.Vegetation.Map.Latitude.Max
    _help: Specifies the value (in decimal degrees) of the maximum latitude for your
      domain, if Solver.CLM.Vegetation.Map.Latitude.Type was set to 'Linear'.
    type: float32
  Solver_CLM_Vegetation_Map_Longitude_Type:
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Type
    _help: Specifies the type of longitude specification for CLM. Valid types are
      'Constant', 'Linear', and 'PFBFile'.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Constant
            value: Constant
          - text: Linear
            value: Linear
          - text: PFBFile
            value: PFBFile
  Solver_CLM_Vegetation_Map_Longitude_Value:
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Value
    _help: Specifies the constant value (in decimal degrees) of the longitude for
      your domain, if Solver.CLM.Vegetation.Map.Longitude.Type was set to 'Constant'.
    type: float32
  Solver_CLM_Vegetation_Map_Longitude_FileName:
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.FileName
    _help: Specifies the PFB filename of the longitude for your domain, if Solver.CLM.Vegetation.Map.Longitude.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the longitude
      values (in decimal degrees) in each of the grid cells.
    type: string
  Solver_CLM_Vegetation_Map_Longitude_Min:
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Min
    _help: Specifies the value (in decimal degrees) of the minimum longitude for your
      domain, if Solver.CLM.Vegetation.Map.Longitude.Type was set to 'Linear'.
    type: float32
  Solver_CLM_Vegetation_Map_Longitude_Max:
    _parflowId: Solver.CLM.Vegetation.Map.Longitude.Max
    _help: Specifies the value (in decimal degrees) of the maximum longitude for your
      domain, if Solver.CLM.Vegetation.Map.Longitude.Type was set to 'Linear'.
    type: float32
  Solver_CLM_Vegetation_Map_Sand_Type:
    _parflowId: Solver.CLM.Vegetation.Map.Sand.Type
    _help: Specifies the type of sand property specification for CLM. Valid types
      are 'Constant' and 'PFBFile'.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Constant
            value: Constant
          - text: PFBFile
            value: PFBFile
  Solver_CLM_Vegetation_Map_Sand_Value:
    _parflowId: Solver.CLM.Vegetation.Map.Sand.Value
    _help: Specifies the constant value of the percentage of sand for your domain,
      if Solver.CLM.Vegetation.Map.Sand.Type was set to 'Constant'.
    type: float32
  Solver_CLM_Vegetation_Map_Sand_FileName:
    _parflowId: Solver.CLM.Vegetation.Map.Sand.FileName
    _help: Specifies the PFB filename of the sand properties for your domain, if Solver.CLM.Vegetation.Map.Sand.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the percentage
      of sand in each of the grid cells.
    type: string
  Solver_CLM_Vegetation_Map_Clay_Type:
    _parflowId: Solver.CLM.Vegetation.Map.Clay.Type
    _help: Specifies the type of clay property specification for CLM. Valid types
      are 'Constant' and 'PFBFile'.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Constant
            value: Constant
          - text: PFBFile
            value: PFBFile
  Solver_CLM_Vegetation_Map_Clay_Value:
    _parflowId: Solver.CLM.Vegetation.Map.Clay.Value
    _help: Specifies the constant value of the percentage of clay for your domain,
      if Solver.CLM.Vegetation.Map.Clay.Type was set to 'Constant'.
    type: float32
  Solver_CLM_Vegetation_Map_Clay_FileName:
    _parflowId: Solver.CLM.Vegetation.Map.Clay.FileName
    _help: Specifies the PFB filename of the clay properties for your domain, if Solver.CLM.Vegetation.Map.Clay.Type
      was set to 'PFBFile'. This file should be a gridded PFB file with the longitude
      values (in decimal degrees) in each of the grid cells.
    type: string
  Solver_CLM_Vegetation_Map_Color_Type:
    _parflowId: Solver.CLM.Vegetation.Map.Color.Type
    _help: Specifies the type of color property specification for CLM. Valid types
      are 'Constant' and 'PFBFile'.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Constant
            value: Constant
          - text: PFBFile
            value: PFBFile
  Solver_CLM_Vegetation_Map_Color_Value:
    _parflowId: Solver.CLM.Vegetation.Map.Color.Value
    _help: Specifies the constant value of the color for your domain, if Solver.CLM.Vegetation.Map.Color.Type
      was set to 'Constant'.
    type: int8
  Solver_CLM_Vegetation_Map_Color_FileName:
    _parflowId: Solver.CLM.Vegetation.Map.Color.FileName
    _help: Specifies the PFB filename of the color properties for your domain, if
      Solver.CLM.Vegetation.Map.Color.Type was set to 'PFBFile'. This file should
      be a gridded PFB file with the longitude values (in decimal degrees) in each
      of the grid cells.
    type: string
  Solver_CoarseSolve:
    _parflowId: Solver.CoarseSolve
    _help: '[Type: int]'
    type: float32
  Solver_CompCompress:
    _parflowId: Solver.CompCompress
    _help: '[Type: int]'
    type: float32
  Solver_DiagScale:
    _parflowId: Solver.DiagScale
    _help: '[Type: int]'
    type: float32
  Solver_DiagSolver:
    _parflowId: Solver.DiagSolver
    _help: '[Type: int]'
    type: float32
  Solver_Drop:
    _parflowId: Solver.Drop
    _help: This key gives a clipping value for data written to PFSB files. Data values
      greater than the negative of this value and less than the value itself are treated
      as zero and not written to PFSB files.
    type: float32
  Solver_DropTol:
    _parflowId: Solver.DropTol
    _help: '[Type: int]'
    type: float32
  Solver_EvapTrans_FileLooping:
    _parflowId: Solver.EvapTrans.FileLooping
    _help: '[Type: boolean/string]'
    type: string
  Solver_EvapTrans_FileName:
    _parflowId: Solver.EvapTrans.FileName
    _help: This key specifies specifies filename for the distributed .pfb file that
      contains the flux values for Richardsâ€™ equation. This file has [T-1] units.
      For the steady-state option (Solver.EvapTransFile=True) this key should be the
      complete filename. For the transient option (Solver.EvapTransFileTransient=True
      then the filename is a header and ParFlow will load one file per timestep, with
      the form filename.00000.pfb.
    type: string
  Solver_EvapTransFile:
    _parflowId: Solver.EvapTransFile
    _help: This key specifies specifies that the Flux terms for Richardsâ€™ equation
      are read in from a .pfb file. This file has [T-1] units. Note this key is for
      a steady-state flux and should not be used in conjunction with the transient
      key below.
    type: string
  Solver_EvapTransFileTransient:
    _parflowId: Solver.EvapTransFileTransient
    _help: This key specifies specifies that the Flux terms for Richardsâ€™ equation
      are read in from a series of flux .pfb file. Each file has [T-1] units. Note
      this key should not be used with the key above, only one of these keys should
      be set to True at a time, not both.
    type: string
  Solver_Jacobian:
    _parflowId: Solver.Jacobian
    _help: '[Type: int]'
    type: float32
  Solver_LSM:
    _parflowId: Solver.LSM
    _help: This key specifies whether a land surface model, such as CLM, will be called
      each solver timestep. Choices for this key include none and CLM. Note that CLM
      must be compiled and linked at runtime for this option to be active.
    type: string
    domains:
      - type: LabelList
        values:
          - text: none
            value: none
          - text: CLM
            value: CLM
  Solver_MaxConvergenceFailures:
    _parflowId: Solver.MaxConvergenceFailures
    _help: This key gives the maximum number of convergence failures allowed. Each
      convergence failure cuts the timestep in half and the solver tries to advance
      the solution with the reduced timestep. The default value is 3. Note that setting
      this value to a value greater than 9 may result in errors in how time cycles
      are calculated. Time is discretized in terms of the base time unit and if the
      solver begins to take very small timesteps smallerthanbasetimeunit1000 the values
      based on time cycles will be change at slightly incorrect times. If the problem
      is failing converge so poorly that a large number of restarts are required,
      consider setting the timestep to a smaller value.
    type: int8
  Solver_MaxIter:
    _parflowId: Solver.MaxIter
    _help: This key gives the maximum number of iterations that will be allowed for
      time-stepping. This is to prevent a run-away simulation.
    type: int8
  Solver_MaxLevels:
    _parflowId: Solver.MaxLevels
    _help: '[Type: int]'
    type: float32
  Solver_MaxMinNX:
    _parflowId: Solver.MaxMinNX
    _help: '[Type: int]'
    type: float32
  Solver_MaxMinNY:
    _parflowId: Solver.MaxMinNY
    _help: '[Type: int]'
    type: float32
  Solver_MaxMinNZ:
    _parflowId: Solver.MaxMinNZ
    _help: '[Type: int]'
    type: float32
  Solver_OverlandDiffusive_Epsilon:
    _parflowId: Solver.OverlandDiffusive.Epsilon
    _help: This key provides a minimum value for the Sf used in the OverlandDiffusive
      boundary condition.
    type: float32
  Solver_OverlandKinematic_Epsilon:
    _parflowId: Solver.OverlandKinematic.Epsilon
    _help: This key provides a minimum value for the Sf used in the OverlandKinematic
      boundary condition.
    type: float32
  Solver_PolyDegree:
    _parflowId: Solver.PolyDegree
    _help: '[Type: int]'
    type: float32
  Solver_PolyPC:
    _parflowId: Solver.PolyPC
    _help: '[Type: int]'
    type: float32
  Solver_PrintCLM:
    _parflowId: Solver.PrintCLM
    _help: This key specifies whether the CLM writes two dimensional binary output
      files to a PFB binary format. Note that CLM must be compiled and linked at runtime
      for this option to be active. These files are all written according to the standard
      format used for all ParFlow variables, using the runname, and istep. Variables
      are either two-dimensional or over the number of CLM layers (default of ten).
    type: string
  Solver_PrintConcentration:
    _parflowId: Solver.PrintConcentration
    _help: This key is used to turn on printing of the concentration data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    type: string
  Solver_PrintDZMultiplier:
    _parflowId: Solver.PrintDZMultiplier
    _help: '[Type: int]'
    type: float32
  Solver_PrintEvapTrans:
    _parflowId: Solver.PrintEvapTrans
    _help: '[Type: int]'
    type: float32
  Solver_PrintEvapTransSum:
    _parflowId: Solver.PrintEvapTransSum
    _help: '[Type: int]'
    type: float32
  Solver_PrintLSMSink:
    _parflowId: Solver.PrintLSMSink
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    type: string
  Solver_PrintMannings:
    _parflowId: Solver.PrintMannings
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    type: string
  Solver_PrintMask:
    _parflowId: Solver.PrintMask
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    type: string
  Solver_PrintOverlandBCFlux:
    _parflowId: Solver.PrintOverlandBCFlux
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    type: string
  Solver_PrintOverlandSum:
    _parflowId: Solver.PrintOverlandSum
    _help: This key is used to turn on printing of the flux array passed from CLM
      to ParFlow. Printing occurs at each DumpInterval time.
    type: string
  Solver_PrintPressure:
    _parflowId: Solver.PrintPressure
    _help: This key is used to turn on printing of the pressure data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    type: string
  Solver_PrintSaturation:
    _parflowId: Solver.PrintSaturation
    _help: This key is used to turn on printing of the saturation data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    type: string
  Solver_PrintSlopes:
    _parflowId: Solver.PrintSlopes
    _help: This key is used to turn on printing of the saturation data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    type: string
  Solver_PrintSpecificStorage:
    _parflowId: Solver.PrintSpecificStorage
    _help: This key is used to turn on printing of the saturation data. The printing
      of the data is controlled by values in the timing information section. The data
      is written as a PFB file.
    type: string
  Solver_PrintSubsurf:
    _parflowId: Solver.PrintSubsurf
    _help: This key is used to turn on printing of the subsurface data, Permeability
      and Porosity. The data is printed after it is generated and before the main
      time stepping loop - only once during the run. The data is written as a PFB
      file.
    type: string
  Solver_PrintSubsurfData:
    _parflowId: Solver.PrintSubsurfData
    _help: This key is used to turn on printing of the subsurface data, Permeability
      and Porosity. The data is printed after it is generated and before the main
      time stepping loop - only once during the run. The data is written as a PFB
      file.
    type: string
  Solver_PrintTop:
    _parflowId: Solver.PrintTop
    _help: '?'
    type: string
  Solver_PrintVelocities:
    _parflowId: Solver.PrintVelocities
    _help: This key is used to turn on printing of the x,y, and z velocity data. The
      printing of the data is controlled by values in the timing information section.
      The data is written as a PFB file.
    type: string
  Solver_PrintWells:
    _parflowId: Solver.PrintWells
    _help: This key is used to turn on collection and printing of the well data. The
      data is collected at intervals given by values in the timing information section.
      Printing occurs at the end of the run when all collected data is written.
    type: string
  Solver_WritePfbSlopes:
    _parflowId: Solver.WritePfbSlopes
    _help: This key is used to turn on collection and printing of the slopes into
      a PFB file.
    type: string
  Solver_WritePfbMannings:
    _parflowId: Solver.WritePfbMannings
    _help: This key is used to turn on collection and printing of the mannings coefficients
      into a PFB file.
    type: string
  Solver_RAPType:
    _parflowId: Solver.RAPType
    _help: '[Type: int]'
    type: float32
  Solver_RelTol:
    _parflowId: Solver.RelTol
    _help: This value gives the relative tolerance for the linear solve algorithm.
    type: float32
  Solver_SadvectOrder:
    _parflowId: Solver.SadvectOrder
    _help: This key controls the order of the explicit method used in advancing the
      concentrations. This value can be either 1 for a standard upwind first order
      or 2 for a second order Godunov method.
    type: int8
  Solver_SlopeAccountingCLM:
    _parflowId: Solver.SlopeAccountingCLM
    _help: This key specifies whether the CLM allows for the inclusion of slopes when
      determining solar zenith angles. Note that CLM must be compiled and linked at
      runtime for this option to be active.
    type: string
  Solver_Smoother:
    _parflowId: Solver.Smoother
    _help: '[Type: int]'
    type: float32
  Solver_Spinup:
    _parflowId: Solver.Spinup
    _help: '[Type: boolean]'
    type: string
  Solver_Symmetric:
    _parflowId: Solver.Symmetric
    _help: '[Type: int]'
    type: float32
  Solver_TerrainFollowingGrid:
    _parflowId: Solver.TerrainFollowingGrid
    _help: This key specifies that a terrain-following coordinate transform is used
      for solver Richards. This key sets x and y subsurface slopes to be the same
      as the Topographic slopes (a value of False sets these subsurface slopes to
      zero). These slopes are used in the Darcy fluxes to add a density, gravity -dependent
      term. This key will not change the output files (that is the output is still
      orthogonal) or the geometries (they will still follow the computational grid)â€“
      these two things are both to do items. This key only changes solver Richards,
      not solver Impes.
    type: string
  Solver_TerrainFollowingGrid_SlopeUpwindFormulation:
    _parflowId: Solver.TerrainFollowingGrid.SlopeUpwindFormulation
    _help: This key specifies optional modifications to the terrain following grid
      formulation (Equation 5.8) . Choices for this key are Original, Upwind, UpwindSine.
      Original is the original TFG formulation shown in Equation 5.8 in the manual.
      The Original option calculates the theta-x and theta-y for a cell face as the
      average of the two adjacent cell slopes (i.e. assuming a cell centered slope
      calculation). The Upwind option uses the the theta-x and theta-y of a cell directly
      without averaging (i.e. assuming a face centered slope calculation). The UpwindSine
      is the same as the Upwind option but it also removes the Sine term from 5.8.
      Note the UpwindSine option is for experimental purposes only and should not
      be used in standard simulations. Also note that the choice of upwind orOriginal
      formulation should consistent with the choice of overland flow boundary condition
      if overland flow is being used. The upwind and UpwindSine are consistent with
      OverlandDiffusive and OverlandKinematic while Original is consistent with OverlandFlow.
    type: string
    domains:
      - type: LabelList
        values:
          - text: Original
            value: Original
          - text: Upwind
            value: Upwind
          - text: UpwindSine
            value: UpwindSine
  Solver_TwoNorm:
    _parflowId: Solver.TwoNorm
    _help: '[Type: int]'
    type: float32
  Solver_Weight:
    _parflowId: Solver.Weight
    _help: '[Type: int]'
    type: float32
  Solver_WriteCLMBinary:
    _parflowId: Solver.WriteCLMBinary
    _help: This key specifies whether the CLM writes two dimensional binary output
      files in a generic binary format. Note that CLM must be compiled and linked
      at runtime for this option to be active.
    type: string
  Solver_Linear:
    _parflowId: Solver.Linear
    _help: This key specifies the linear solver used for solver IMPES. Choices for
      this key are MGSemi, PPCG, PCG, and CGHS. The choice MGSemi is an algebraic
      mulitgrid linear solver (not a preconditioned conjugate gradient) which may
      be less robust than PCG as described in [3]. The choice PPCG is a preconditioned
      conjugate gradient solver. The choice PCG is a conjugate gradient solver with
      a multigrid preconditioner. The choice CGHS is a conjugate gradient solver.
    type: string
    domains:
      - type: LabelList
        values:
          - text: MGSemi
            value: MGSemi
          - text: PPCG
            value: PPCG
          - text: PCG
            value: PCG
          - text: CGHS
            value: CGHS
  Solver_Linear_KrylovDimension:
    _parflowId: Solver.Linear.KrylovDimension
    _help: This key specifies the maximum number of vectors to be used in setting
      up the Krylov subspace in the GMRES iterative solver. These vectors are of problem
      size and it should be noted that large increases in this parameter can limit
      problem sizes. However, increasing this parameter can sometimes help nonlinear
      solver convergence.
    type: int8
  Solver_Linear_MaxRestarts:
    _parflowId: Solver.Linear.MaxRestarts
    _help: This key specifies the number of restarts allowed to the GMRES solver.
      Restarts start the development of the Krylov subspace over using the current
      iterate as the initial iterate for the next pass.
    type: int8
  Solver_Linear_MaxRestart:
    _parflowId: Solver.Linear.MaxRestart
    _help: This key specifies the number of restarts allowed to the GMRES solver.
      Restarts start the development of the Krylov subspace over using the current
      iterate as the initial iterate for the next pass.
    type: int8
  Solver_Linear_Preconditioner:
    _parflowId: Solver.Linear.Preconditioner
    _help: This key specifies which preconditioner to use. Currently, the three choices
      are NoPC, MGSemi, PFMG, PFMGOctree and SMG. The choice NoPC specifies that no
      preconditioner should be used. The choice MGSemi specifies a semi-coarsening
      multigrid algorithm which uses a point relaxation method. The choice SMG specifies
      a semi-coarsening multigrid algorithm which uses plane relaxations. This method
      is more robust than MGSemi, but generally requires more memory and compute time.
      The choice PFMGOctree can be more efficient for problems with large numbers
      of inactive cells.
    type: string
    domains:
      - type: LabelList
        values:
          - text: NoPC
            value: NoPC
          - text: MGSemi
            value: MGSemi
          - text: PFMG
            value: PFMG
          - text: PFMGOctree
            value: PFMGOctree
          - text: SMG
            value: SMG
  Solver_Linear_Preconditioner_SymmetricMat:
    _parflowId: Solver.Linear.Preconditioner.SymmetricMat
    _help: 'This key specifies whether the preconditioning matrix is symmetric. Choices
      fo rthis key are Symmetric and Nonsymmetric. The choice Symmetric specifies
      that the symmetric part of the Jacobian will be used as the preconditioning
      matrix. The choice Nonsymmetric specifies that the full Jacobian will be used
      as the preconditioning matrix. NOTE: ONLY Symmetric CAN BE USED IF MGSemi IS
      THE SPECIFIED PRECONDITIONER!'
    type: string
    domains:
      - type: LabelList
        values:
          - text: Symmetric
            value: Symmetric
          - text: Nonsymmetric
            value: Nonsymmetric
  Solver_Linear_Preconditioner_PCMatrixType:
    _parflowId: Solver.Linear.Preconditioner.PCMatrixType
    _help: '[Type: string]'
    type: string
    domains:
      - type: LabelList
        values:
          - text: FullJacobian
            value: FullJacobian
          - text: PFSymmetric
            value: PFSymmetric
  Solver_NonlinearSolver:
    _parflowId: Solver.NonlinearSolver
    _help: '[Type: int]'
    type: float32
  Solver_Nonlinear_VariableDz:
    _parflowId: Solver.Nonlinear.VariableDz
    _help: This key specifies whether dZ multipliers are to be used, the default is
      False. The default indicates a false or non-active variable dz and each layer
      thickness is 1.0 [L].
    type: string
  Solver_Nonlinear_FlowBarrierX:
    _parflowId: Solver.Nonlinear.FlowBarrierX
    _help: This key specifies whether Flow Barriers are to be used in the X direction,
      the default is False. The default indicates a false or FBx value of one [-]
      everywhere in the domain.
    type: string
  Solver_Nonlinear_FlowBarrierY:
    _parflowId: Solver.Nonlinear.FlowBarrierY
    _help: This key specifies whether Flow Barriers are to be used in the Y direction,
      the default is False. The default indicates a false or FBy value of one [-]
      everywhere in the domain.
    type: string
  Solver_Nonlinear_FlowBarrierZ:
    _parflowId: Solver.Nonlinear.FlowBarrierZ
    _help: This key specifies whether Flow Barriers are to be used in the Z direction,
      the default is False. The default indicates a false or FBz value of one [-]
      everywhere in the domain.
    type: string
  Solver_Nonlinear_ResidualTol:
    _parflowId: Solver.Nonlinear.ResidualTol
    _help: This key specifies the tolerance that measures how much the relative reduction
      in the nonlinear residual should be before nonlinear iterations stop. The magnitude
      of the residual is measured with the l1 (max) norm.
    type: float32
  Solver_Nonlinear_StepTol:
    _parflowId: Solver.Nonlinear.StepTol
    _help: This key specifies the tolerance that measures how small the difference
      between two consecutive nonlinear steps can be before nonlinear iterations stop.
    type: float32
  Solver_Nonlinear_MaxIter:
    _parflowId: Solver.Nonlinear.MaxIter
    _help: This key specifies the maximum number of nonlinear iterations allowed before
      iterations stop with a convergence failure.
    type: int8
  Solver_Nonlinear_PrintFlag:
    _parflowId: Solver.Nonlinear.PrintFlag
    _help: This key specifies the amount of informational data that is printed to
      the *.out.kinsol.log file. Choices for this key are NoVerbosity, LowVerbosity,
      NormalVerbosity and HighVerbosity. The choice NoVerbosity prints no statistics
      about the nonlinear convergence process. The choice LowVerbosity outputs the
      nonlinear iteration count, the scaled norm of the nonlinear function, and the
      number of function calls. The choice NormalVerbosity prints the same as for
      LowVerbosity and also the global strategy statistics. The choice HighVerbosity
      prints the same as for NormalVerbosity with the addition of further Krylov iteration
      statistics.
    type: string
    domains:
      - type: LabelList
        values:
          - text: NoVerbosity
            value: NoVerbosity
          - text: LowVerbosity
            value: LowVerbosity
          - text: NormalVerbosity
            value: NormalVerbosity
          - text: HighVerbosity
            value: HighVerbosity
  Solver_Nonlinear_EtaChoice:
    _parflowId: Solver.Nonlinear.EtaChoice
    _help: This key specifies how the linear system tolerance will be selected. The
      linear system is solved until a relative residual reduction of n is achieved.
      Linear residual norms are measured in the l^2 norm. Choices for this key include
      EtaConstant, Walker1 and Walker2. If the choice EtaConstant is specified, then
      n will be taken as constant. The choices Walker1 and Walker2 specify choices
      for n developed by Eisenstat and Walker (see reference in manual). For both
      of the last two choices, n is never allowed to be less than 1e-4.
    type: string
    domains:
      - type: LabelList
        values:
          - text: EtaConstant
            value: EtaConstant
          - text: Walker1
            value: Walker1
          - text: Walker2
            value: Walker2
  Solver_Nonlinear_EtaValue:
    _parflowId: Solver.Nonlinear.EtaValue
    _help: This key specifies the constant value of n for the EtaChoice key EtaConstant.
    type: float32
  Solver_Nonlinear_EtaAlpha:
    _parflowId: Solver.Nonlinear.EtaAlpha
    _help: This key specifies the value of alpha for the case of EtaChoice being Walker2.
    type: float32
  Solver_Nonlinear_EtaGamma:
    _parflowId: Solver.Nonlinear.EtaGamma
    _help: This key specifies the value of gamma for the case of EtaChoice being Walker2.
    type: float32
  Solver_Nonlinear_UseJacobian:
    _parflowId: Solver.Nonlinear.UseJacobian
    _help: This key specifies whether the Jacobian will be used in matrix-vector products
      or whether a matrix-free version of the code will run. Choices for this key
      are False and True. Using the Jacobian will most likely decrease the number
      of nonlinear iterations but require more memory to run.
    type: string
  Solver_Nonlinear_DerivativeEpsilon:
    _parflowId: Solver.Nonlinear.DerivativeEpsilon
    _help: This key specifies the value of epsilon used in approximating the action
      of the Jacobian on a vector with approximate directional derivatives of the
      nonlinear function. This parameter is only used when the UseJacobian key is
      False.
    type: float32
  Solver_Nonlinear_Globalization:
    _parflowId: Solver.Nonlinear.Globalization
    _help: This key specifies the type of global strategy to use. Possible choices
      for this key are InexactNewton and LineSearch. The choice InexactNewton specifies
      no global strategy, and the choice LineSearch specifies that a line search strategy
      should be used where the nonlinear step can be lengthened or decreased to satisfy
      certain criteria.
    type: string
    domains:
      - type: LabelList
        values:
          - text: LineSearch
            value: LineSearch
          - text: InexactNewton
            value: InexactNewton
  Solver_WriteSiloCLM:
    _parflowId: Solver.WriteSiloCLM
    _help: This key specifies whether the CLM writes two dimensional binary output
      files to a silo binary format. This data may be read in by VisIT and other visualization
      packages. Note that CLM and silo must be compiled and linked at runtime for
      this option to be active. These files are all written according to the standard
      format used for all ParFlow variables, using the runname, and istep. Variables
      are either two-dimensional or over the number of CLM layers (default of ten).
    type: string
  Solver_WriteSiloConcentration:
    _parflowId: Solver.WriteSiloConcentration
    _help: This key is used to specify printing of the concentration data in silo
      binary format. The printing of the data is controlled by values in the timing
      information section.
    type: string
  Solver_WriteSiloDZMultiplier:
    _parflowId: Solver.WriteSiloDZMultiplier
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloEvapTrans:
    _parflowId: Solver.WriteSiloEvapTrans
    _help: This key is used to specify printing of the evaporation and rainfall flux
      data using silo binary format. This data comes from either clm or from external
      calls to ParFlow such as WRF. This data is in units of [L3T-1]. The printing
      of the data is controlled by values in the timing information section.
    type: string
  Solver_WriteSiloEvapTransSum:
    _parflowId: Solver.WriteSiloEvapTransSum
    _help: This key is used to specify printing of the evaporation and rainfall flux
      data using silo binary format as a running, cumulative amount. This data comes
      from either clm or from external calls to ParFlow such as WRF. This data is
      in units of [L3]. The printing of the data is controlled by values in the timing
      information section.
    type: string
  Solver_WriteSiloMannings:
    _parflowId: Solver.WriteSiloMannings
    _help: This key is used to specify printing of the Manningâ€™s roughness data in
      silo binary format. The printing of the data is controlled by values in the
      timing information section.
    type: string
  Solver_WriteSiloMask:
    _parflowId: Solver.WriteSiloMask
    _help: This key is used to specify printing of the mask data using silo binary
      format. The mask contains values equal to one for active cells and zero for
      inactive cells. The printing of the data is controlled by values in the timing
      information section.
    type: string
  Solver_WriteSiloOverlandBCFlux:
    _parflowId: Solver.WriteSiloOverlandBCFlux
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloOverlandSum:
    _parflowId: Solver.WriteSiloOverlandSum
    _help: This key is used to specify calculation and printing of the total overland
      outflow from the domain using silo binary format as a running cumulative amount.
      This is integrated along all domain boundaries and is calculated any location
      that slopes at the edge of the domain point outward. This data is in units of
      [L3]. The printing of the data is controlled by values in the timing information
      section.
    type: string
  Solver_WriteSiloPMPIOConcentration:
    _parflowId: Solver.WriteSiloPMPIOConcentration
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIODZMultiplier:
    _parflowId: Solver.WriteSiloPMPIODZMultiplier
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOEvapTrans:
    _parflowId: Solver.WriteSiloPMPIOEvapTrans
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOEvapTransSum:
    _parflowId: Solver.WriteSiloPMPIOEvapTransSum
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOMannings:
    _parflowId: Solver.WriteSiloPMPIOMannings
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOMask:
    _parflowId: Solver.WriteSiloPMPIOMask
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOOverlandBCFlux:
    _parflowId: Solver.WriteSiloPMPIOOverlandBCFlux
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOOverlandSum:
    _parflowId: Solver.WriteSiloPMPIOOverlandSum
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOPressure:
    _parflowId: Solver.WriteSiloPMPIOPressure
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOSaturation:
    _parflowId: Solver.WriteSiloPMPIOSaturation
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOSlopes:
    _parflowId: Solver.WriteSiloPMPIOSlopes
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOSpecificStorage:
    _parflowId: Solver.WriteSiloPMPIOSpecificStorage
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOSubsurfData:
    _parflowId: Solver.WriteSiloPMPIOSubsurfData
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOTop:
    _parflowId: Solver.WriteSiloPMPIOTop
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPMPIOVelocities:
    _parflowId: Solver.WriteSiloPMPIOVelocities
    _help: '[Type: boolean/string]'
    type: string
  Solver_WriteSiloPressure:
    _parflowId: Solver.WriteSiloPressure
    _help: This key is used to specify printing of the pressure data in silo binary
      format. The printing of the data is controlled by values in the timing information
      section. This data may be read in by VisIT and other visualization packages.
    type: string
  Solver_WriteSiloSaturation:
    _parflowId: Solver.WriteSiloSaturation
    _help: This key is used to specify printing of the saturation data using silo
      binary format. The printing of the data is controlled by values in the timing
      information section.
    type: string
  Solver_WriteSiloSlopes:
    _parflowId: Solver.WriteSiloSlopes
    _help: This key is used to turn on printing of the x adn y slope data in silo
      binary format. The printing of the data is controlled by values in the timing
      information section. The data is written as a PFB file.
    type: string
  Solver_WriteSiloSpecificStorage:
    _parflowId: Solver.WriteSiloSpecificStorage
    _help: This key is used to specify printing of the specific storage data in silo
      binary format. The printing of the data is controlled by values in the timing
      information section.
    type: string
  Solver_WriteSiloSubsurfData:
    _parflowId: Solver.WriteSiloSubsurfData
    _help: This key is used to specify printing of the subsurface data, Permeability
      and Porosity in silo binary file format. The data is printed after it is generated
      and before the main time stepping loop - only once during the run. This data
      may be read in by VisIT and other visualization packages.
    type: string
  Solver_WriteSiloTop:
    _parflowId: Solver.WriteSiloTop
    _help: This key is used to turn on printing of the x,y, and z velocity data. The
      printing of the data is controlled by values in the timing information section.
      The data is written as a PFB file.
    type: string
  Solver_WriteSiloVelocities:
    _parflowId: Solver.WriteSiloVelocities
    _help: This key is used to turn on printing of the x,y, and z velocity data in
      silo binary format. The printing of the data is controlled by values in the
      timing information section. The data is written as a PFB file.
    type: string
Grid:
  ComputationalGrid_Lower_X:
    _parflowId: ComputationalGrid.Lower.X
    _help: This assigns the lower x coordinate location for the computational grid.
    type: float32
  ComputationalGrid_Lower_Y:
    _parflowId: ComputationalGrid.Lower.Y
    _help: This assigns the lower y coordinate location for the computational grid.
    type: float32
  ComputationalGrid_Lower_Z:
    _parflowId: ComputationalGrid.Lower.Z
    _help: This assigns the lower z coordinate location for the computational grid.
    type: float32
  ComputationalGrid_NX:
    _parflowId: ComputationalGrid.NX
    _help: This assigns the number of grid cells in the x direction for the computational
      grid.
    type: int8
  ComputationalGrid_NY:
    _parflowId: ComputationalGrid.NY
    _help: This assigns the number of grid cells in the y direction for the computational
      grid.
    type: int8
  ComputationalGrid_NZ:
    _parflowId: ComputationalGrid.NZ
    _help: This assigns the number of grid cells in the z direction for the computational
      grid.
    type: int8
  ComputationalGrid_DX:
    _parflowId: ComputationalGrid.DX
    _help: This defines the size of grid cells in the x direction. Units are L and
      are defined by the units of the hydraulic conductivity used in the problem.
    type: float32
  ComputationalGrid_DY:
    _parflowId: ComputationalGrid.DY
    _help: This defines the size of grid cells in the y direction. Units are L and
      are defined by the units of the hydraulic conductivity used in the problem.
    type: float32
  ComputationalGrid_DZ:
    _parflowId: ComputationalGrid.DZ
    _help: This defines the size of grid cells in the z direction. Units are L and
      are defined by the units of the hydraulic conductivity used in the problem.
    type: float32
